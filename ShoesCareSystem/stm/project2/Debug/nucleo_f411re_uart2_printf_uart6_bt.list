
nucleo_f411re_uart2_printf_uart6_bt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08004580  08004580  00005580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046e0  080046e0  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080046e0  080046e0  000056e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046e8  080046e8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046e8  080046e8  000056e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046ec  080046ec  000056ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080046f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000068  08004758  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004758  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b8d  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000193c  00000000  00000000  0000ec25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00010568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d6  00000000  00000000  00010d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164e3  00000000  00000000  000112ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009945  00000000  00000000  000277d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087a02  00000000  00000000  00031116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8b18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a50  00000000  00000000  000b8b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000bb5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004568 	.word	0x08004568

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004568 	.word	0x08004568

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fcf2 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f83c 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f8f8 	bl	80007a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 f8a2 	bl	80006f8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005b4:	f000 f8ca 	bl	800074c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx2char,1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	4911      	ldr	r1, [pc, #68]	@ (8000600 <main+0x60>)
 80005bc:	4811      	ldr	r0, [pc, #68]	@ (8000604 <main+0x64>)
 80005be:	f001 fe0c 	bl	80021da <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &btchar,1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	4910      	ldr	r1, [pc, #64]	@ (8000608 <main+0x68>)
 80005c6:	4811      	ldr	r0, [pc, #68]	@ (800060c <main+0x6c>)
 80005c8:	f001 fe07 	bl	80021da <HAL_UART_Receive_IT>
  printf("start main2()\r\n");
 80005cc:	4810      	ldr	r0, [pc, #64]	@ (8000610 <main+0x70>)
 80005ce:	f002 fea9 	bl	8003324 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(rx2Flag)
 80005d2:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <main+0x74>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d006      	beq.n	80005ea <main+0x4a>
	  {
			printf("recv2 : %s\r\n",rx2Data);
 80005dc:	490e      	ldr	r1, [pc, #56]	@ (8000618 <main+0x78>)
 80005de:	480f      	ldr	r0, [pc, #60]	@ (800061c <main+0x7c>)
 80005e0:	f002 fe38 	bl	8003254 <iprintf>
			rx2Flag =0;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <main+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
	//	    HAL_UART_Transmit(&huart6, (uint8_t *)buf, strlen(buf), 0xFFFF);
	  }
	  if(btFlag)
 80005ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <main+0x80>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0ee      	beq.n	80005d2 <main+0x32>
	  {
//		printf("bt : %s\r\n",btData);
			btFlag =0;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <main+0x80>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
			bluetooth_Event();
 80005fa:	f000 f979 	bl	80008f0 <bluetooth_Event>
	  if(rx2Flag)
 80005fe:	e7e8      	b.n	80005d2 <main+0x32>
 8000600:	20000114 	.word	0x20000114
 8000604:	20000084 	.word	0x20000084
 8000608:	2000014b 	.word	0x2000014b
 800060c:	200000cc 	.word	0x200000cc
 8000610:	08004580 	.word	0x08004580
 8000614:	20000115 	.word	0x20000115
 8000618:	20000118 	.word	0x20000118
 800061c:	08004590 	.word	0x08004590
 8000620:	2000014a 	.word	0x2000014a

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	@ 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f002 ff76 	bl	8003524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b28      	ldr	r3, [pc, #160]	@ (80006f0 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a27      	ldr	r2, [pc, #156]	@ (80006f0 <SystemClock_Config+0xcc>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b25      	ldr	r3, [pc, #148]	@ (80006f0 <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <SystemClock_Config+0xd0>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000694:	2310      	movs	r3, #16
 8000696:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000698:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800069c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800069e:	2304      	movs	r3, #4
 80006a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 f822 	bl	80016f4 <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006b6:	f000 fa67 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2302      	movs	r3, #2
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fa84 	bl	8001be4 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e2:	f000 fa51 	bl	8000b88 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	@ 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	@ (8000748 <MX_USART2_UART_Init+0x50>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 8000730:	f001 fc78 	bl	8002024 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800073a:	f000 fa25 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000084 	.word	0x20000084
 8000748:	40004400 	.word	0x40004400

0800074c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_USART6_UART_Init+0x4c>)
 8000752:	4a12      	ldr	r2, [pc, #72]	@ (800079c <MX_USART6_UART_Init+0x50>)
 8000754:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <MX_USART6_UART_Init+0x4c>)
 8000758:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800075c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_USART6_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_USART6_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_USART6_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_USART6_UART_Init+0x4c>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_USART6_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_USART6_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_USART6_UART_Init+0x4c>)
 8000784:	f001 fc4e 	bl	8002024 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800078e:	f000 f9fb 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000cc 	.word	0x200000cc
 800079c:	40011400 	.word	0x40011400

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	4b38      	ldr	r3, [pc, #224]	@ (800089c <MX_GPIO_Init+0xfc>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a37      	ldr	r2, [pc, #220]	@ (800089c <MX_GPIO_Init+0xfc>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b35      	ldr	r3, [pc, #212]	@ (800089c <MX_GPIO_Init+0xfc>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	4b31      	ldr	r3, [pc, #196]	@ (800089c <MX_GPIO_Init+0xfc>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a30      	ldr	r2, [pc, #192]	@ (800089c <MX_GPIO_Init+0xfc>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b2e      	ldr	r3, [pc, #184]	@ (800089c <MX_GPIO_Init+0xfc>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b2a      	ldr	r3, [pc, #168]	@ (800089c <MX_GPIO_Init+0xfc>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a29      	ldr	r2, [pc, #164]	@ (800089c <MX_GPIO_Init+0xfc>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b27      	ldr	r3, [pc, #156]	@ (800089c <MX_GPIO_Init+0xfc>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b23      	ldr	r3, [pc, #140]	@ (800089c <MX_GPIO_Init+0xfc>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a22      	ldr	r2, [pc, #136]	@ (800089c <MX_GPIO_Init+0xfc>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <MX_GPIO_Init+0xfc>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2120      	movs	r1, #32
 800082a:	481d      	ldr	r0, [pc, #116]	@ (80008a0 <MX_GPIO_Init+0x100>)
 800082c:	f000 ff48 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000836:	481b      	ldr	r0, [pc, #108]	@ (80008a4 <MX_GPIO_Init+0x104>)
 8000838:	f000 ff42 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000842:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4814      	ldr	r0, [pc, #80]	@ (80008a4 <MX_GPIO_Init+0x104>)
 8000854:	f000 fdb0 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000858:	2320      	movs	r3, #32
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <MX_GPIO_Init+0x100>)
 8000870:	f000 fda2 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;				//0x00001000
 8000874:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;		//0x00000001
 800087a:	2301      	movs	r3, #1
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;				//0x00000000
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;		//0x0000000U
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_GPIO_Init+0x104>)
 800088e:	f000 fd93 	bl	80013b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40020800 	.word	0x40020800

080008a8 <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	2201      	movs	r2, #1
 80008b6:	4619      	mov	r1, r3
 80008b8:	4803      	ldr	r0, [pc, #12]	@ (80008c8 <MX_GPIO_LED_ON+0x20>)
 80008ba:	f000 ff01 	bl	80016c0 <HAL_GPIO_WritePin>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40020000 	.word	0x40020000

080008cc <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	2200      	movs	r2, #0
 80008da:	4619      	mov	r1, r3
 80008dc:	4803      	ldr	r0, [pc, #12]	@ (80008ec <MX_GPIO_LED_OFF+0x20>)
 80008de:	f000 feef 	bl	80016c0 <HAL_GPIO_WritePin>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40020000 	.word	0x40020000

080008f0 <bluetooth_Event>:
void bluetooth_Event()
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0a4      	sub	sp, #144	@ 0x90
 80008f4:	af02      	add	r7, sp, #8

  int i=0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  char * pToken;
  char * pArray[ARR_CNT]={0};
 80008fc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  char recvBuf[CMD_SIZE]={0};
 800090c:	2300      	movs	r3, #0
 800090e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000910:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000914:	222e      	movs	r2, #46	@ 0x2e
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fe03 	bl	8003524 <memset>
  char sendBuf[CMD_SIZE]={0};
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	222e      	movs	r2, #46	@ 0x2e
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f002 fdfa 	bl	8003524 <memset>
  strcpy(recvBuf,btData);
 8000930:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000934:	4942      	ldr	r1, [pc, #264]	@ (8000a40 <bluetooth_Event+0x150>)
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fecb 	bl	80036d2 <strcpy>

  printf("btData : %s\r\n",btData);
 800093c:	4940      	ldr	r1, [pc, #256]	@ (8000a40 <bluetooth_Event+0x150>)
 800093e:	4841      	ldr	r0, [pc, #260]	@ (8000a44 <bluetooth_Event+0x154>)
 8000940:	f002 fc88 	bl	8003254 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8000944:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000948:	493f      	ldr	r1, [pc, #252]	@ (8000a48 <bluetooth_Event+0x158>)
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fdf2 	bl	8003534 <strtok>
 8000950:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 8000954:	e017      	b.n	8000986 <bluetooth_Event+0x96>
  {
    pArray[i] =  pToken;
 8000956:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	3388      	adds	r3, #136	@ 0x88
 800095e:	443b      	add	r3, r7
 8000960:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000964:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8000968:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800096c:	3301      	adds	r3, #1
 800096e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000972:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000976:	2b04      	cmp	r3, #4
 8000978:	dc0a      	bgt.n	8000990 <bluetooth_Event+0xa0>
      break;
    pToken = strtok(NULL,"[@]");
 800097a:	4933      	ldr	r1, [pc, #204]	@ (8000a48 <bluetooth_Event+0x158>)
 800097c:	2000      	movs	r0, #0
 800097e:	f002 fdd9 	bl	8003534 <strtok>
 8000982:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 8000986:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1e3      	bne.n	8000956 <bluetooth_Event+0x66>
 800098e:	e000      	b.n	8000992 <bluetooth_Event+0xa2>
      break;
 8000990:	bf00      	nop
  }
//  printf("pArray[0] : %s\r\n",pArray[0]);
//  printf("pArray[1] : %s\r\n",pArray[1]);
//  printf("pArray[2] : %s\r\n",pArray[2]);

  if(!strcmp(pArray[1],"LED"))
 8000992:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000994:	492d      	ldr	r1, [pc, #180]	@ (8000a4c <bluetooth_Event+0x15c>)
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fc22 	bl	80001e0 <strcmp>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d123      	bne.n	80009ea <bluetooth_Event+0xfa>
  {
		if(!strcmp(pArray[2],"ON"))
 80009a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009a4:	492a      	ldr	r1, [pc, #168]	@ (8000a50 <bluetooth_Event+0x160>)
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fc1a 	bl	80001e0 <strcmp>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d109      	bne.n	80009c6 <bluetooth_Event+0xd6>
		{
			MX_GPIO_LED_ON(LD2_Pin);
 80009b2:	2020      	movs	r0, #32
 80009b4:	f7ff ff78 	bl	80008a8 <MX_GPIO_LED_ON>
			HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009be:	4825      	ldr	r0, [pc, #148]	@ (8000a54 <bluetooth_Event+0x164>)
 80009c0:	f000 fe7e 	bl	80016c0 <HAL_GPIO_WritePin>
 80009c4:	e021      	b.n	8000a0a <bluetooth_Event+0x11a>
		}
		else if(!strcmp(pArray[2],"OFF"))
 80009c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009c8:	4923      	ldr	r1, [pc, #140]	@ (8000a58 <bluetooth_Event+0x168>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fc08 	bl	80001e0 <strcmp>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d119      	bne.n	8000a0a <bluetooth_Event+0x11a>
		{
			MX_GPIO_LED_OFF(LD2_Pin);
 80009d6:	2020      	movs	r0, #32
 80009d8:	f7ff ff78 	bl	80008cc <MX_GPIO_LED_OFF>
			HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009e2:	481c      	ldr	r0, [pc, #112]	@ (8000a54 <bluetooth_Event+0x164>)
 80009e4:	f000 fe6c 	bl	80016c0 <HAL_GPIO_WritePin>
 80009e8:	e00f      	b.n	8000a0a <bluetooth_Event+0x11a>
		}
  }
  else if(!strncmp(pArray[1]," New conn",sizeof(" New conn")))
 80009ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80009ec:	491b      	ldr	r1, [pc, #108]	@ (8000a5c <bluetooth_Event+0x16c>)
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fbf6 	bl	80001e0 <strcmp>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d01d      	beq.n	8000a36 <bluetooth_Event+0x146>
  {
      return;
  }
  else if(!strncmp(pArray[1]," Already log",sizeof(" Already log")))
 80009fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80009fc:	4918      	ldr	r1, [pc, #96]	@ (8000a60 <bluetooth_Event+0x170>)
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fbee 	bl	80001e0 <strcmp>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
  {
      return;
  }
  else
      return;
 8000a08:	e016      	b.n	8000a38 <bluetooth_Event+0x148>

  sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8000a0a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000a0c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000a0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a10:	1d38      	adds	r0, r7, #4
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	460b      	mov	r3, r1
 8000a16:	4913      	ldr	r1, [pc, #76]	@ (8000a64 <bluetooth_Event+0x174>)
 8000a18:	f002 fc8c 	bl	8003334 <siprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 0xFFFF);
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fbe8 	bl	80001f4 <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	1d39      	adds	r1, r7, #4
 8000a2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a2e:	480e      	ldr	r0, [pc, #56]	@ (8000a68 <bluetooth_Event+0x178>)
 8000a30:	f001 fb48 	bl	80020c4 <HAL_UART_Transmit>
 8000a34:	e000      	b.n	8000a38 <bluetooth_Event+0x148>
      return;
 8000a36:	bf00      	nop

}
 8000a38:	3788      	adds	r7, #136	@ 0x88
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000014c 	.word	0x2000014c
 8000a44:	080045a0 	.word	0x080045a0
 8000a48:	080045b0 	.word	0x080045b0
 8000a4c:	080045b4 	.word	0x080045b4
 8000a50:	080045b8 	.word	0x080045b8
 8000a54:	40020800 	.word	0x40020800
 8000a58:	080045bc 	.word	0x080045bc
 8000a5c:	080045c0 	.word	0x080045c0
 8000a60:	080045cc 	.word	0x080045cc
 8000a64:	080045dc 	.word	0x080045dc
 8000a68:	200000cc 	.word	0x200000cc

08000a6c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000a74:	1d39      	adds	r1, r7, #4
 8000a76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4803      	ldr	r0, [pc, #12]	@ (8000a8c <__io_putchar+0x20>)
 8000a7e:	f001 fb21 	bl	80020c4 <HAL_UART_Transmit>

  return ch;
 8000a82:	687b      	ldr	r3, [r7, #4]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000084 	.word	0x20000084

08000a90 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a2e      	ldr	r2, [pc, #184]	@ (8000b58 <HAL_UART_RxCpltCallback+0xc8>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d128      	bne.n	8000af4 <HAL_UART_RxCpltCallback+0x64>
    {
    	static int i=0;
    	rx2Data[i] = rx2char;
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b5c <HAL_UART_RxCpltCallback+0xcc>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a2e      	ldr	r2, [pc, #184]	@ (8000b60 <HAL_UART_RxCpltCallback+0xd0>)
 8000aa8:	7811      	ldrb	r1, [r2, #0]
 8000aaa:	4a2e      	ldr	r2, [pc, #184]	@ (8000b64 <HAL_UART_RxCpltCallback+0xd4>)
 8000aac:	54d1      	strb	r1, [r2, r3]
    	if((rx2Data[i] == '\r')||(btData[i] == '\n'))
 8000aae:	4b2b      	ldr	r3, [pc, #172]	@ (8000b5c <HAL_UART_RxCpltCallback+0xcc>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8000b64 <HAL_UART_RxCpltCallback+0xd4>)
 8000ab4:	5cd3      	ldrb	r3, [r2, r3]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b0d      	cmp	r3, #13
 8000aba:	d005      	beq.n	8000ac8 <HAL_UART_RxCpltCallback+0x38>
 8000abc:	4b27      	ldr	r3, [pc, #156]	@ (8000b5c <HAL_UART_RxCpltCallback+0xcc>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a29      	ldr	r2, [pc, #164]	@ (8000b68 <HAL_UART_RxCpltCallback+0xd8>)
 8000ac2:	5cd3      	ldrb	r3, [r2, r3]
 8000ac4:	2b0a      	cmp	r3, #10
 8000ac6:	d10b      	bne.n	8000ae0 <HAL_UART_RxCpltCallback+0x50>
    	{
    		rx2Data[i] = '\0';
 8000ac8:	4b24      	ldr	r3, [pc, #144]	@ (8000b5c <HAL_UART_RxCpltCallback+0xcc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a25      	ldr	r2, [pc, #148]	@ (8000b64 <HAL_UART_RxCpltCallback+0xd4>)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8000ad2:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <HAL_UART_RxCpltCallback+0xdc>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000ad8:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <HAL_UART_RxCpltCallback+0xcc>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	e004      	b.n	8000aea <HAL_UART_RxCpltCallback+0x5a>
    	}
    	else
    	{
    		i++;
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <HAL_UART_RxCpltCallback+0xcc>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b5c <HAL_UART_RxCpltCallback+0xcc>)
 8000ae8:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8000aea:	2201      	movs	r2, #1
 8000aec:	491c      	ldr	r1, [pc, #112]	@ (8000b60 <HAL_UART_RxCpltCallback+0xd0>)
 8000aee:	4820      	ldr	r0, [pc, #128]	@ (8000b70 <HAL_UART_RxCpltCallback+0xe0>)
 8000af0:	f001 fb73 	bl	80021da <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART6)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1e      	ldr	r2, [pc, #120]	@ (8000b74 <HAL_UART_RxCpltCallback+0xe4>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d127      	bne.n	8000b4e <HAL_UART_RxCpltCallback+0xbe>
    {
    	static int i=0;
    	btData[i] = btchar;
 8000afe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <HAL_UART_RxCpltCallback+0xe8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a1e      	ldr	r2, [pc, #120]	@ (8000b7c <HAL_UART_RxCpltCallback+0xec>)
 8000b04:	7811      	ldrb	r1, [r2, #0]
 8000b06:	4a18      	ldr	r2, [pc, #96]	@ (8000b68 <HAL_UART_RxCpltCallback+0xd8>)
 8000b08:	54d1      	strb	r1, [r2, r3]
    	if((btData[i] == '\n') || btData[i] == '\r')
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b78 <HAL_UART_RxCpltCallback+0xe8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a16      	ldr	r2, [pc, #88]	@ (8000b68 <HAL_UART_RxCpltCallback+0xd8>)
 8000b10:	5cd3      	ldrb	r3, [r2, r3]
 8000b12:	2b0a      	cmp	r3, #10
 8000b14:	d005      	beq.n	8000b22 <HAL_UART_RxCpltCallback+0x92>
 8000b16:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <HAL_UART_RxCpltCallback+0xe8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a13      	ldr	r2, [pc, #76]	@ (8000b68 <HAL_UART_RxCpltCallback+0xd8>)
 8000b1c:	5cd3      	ldrb	r3, [r2, r3]
 8000b1e:	2b0d      	cmp	r3, #13
 8000b20:	d10b      	bne.n	8000b3a <HAL_UART_RxCpltCallback+0xaa>
    	{
    		btData[i] = '\0';
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <HAL_UART_RxCpltCallback+0xe8>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a10      	ldr	r2, [pc, #64]	@ (8000b68 <HAL_UART_RxCpltCallback+0xd8>)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	54d1      	strb	r1, [r2, r3]
    		btFlag = 1;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <HAL_UART_RxCpltCallback+0xf0>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <HAL_UART_RxCpltCallback+0xe8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	e004      	b.n	8000b44 <HAL_UART_RxCpltCallback+0xb4>
    	}
    	else
    	{
    		i++;
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <HAL_UART_RxCpltCallback+0xe8>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <HAL_UART_RxCpltCallback+0xe8>)
 8000b42:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart6, &btchar,1);
 8000b44:	2201      	movs	r2, #1
 8000b46:	490d      	ldr	r1, [pc, #52]	@ (8000b7c <HAL_UART_RxCpltCallback+0xec>)
 8000b48:	480e      	ldr	r0, [pc, #56]	@ (8000b84 <HAL_UART_RxCpltCallback+0xf4>)
 8000b4a:	f001 fb46 	bl	80021da <HAL_UART_Receive_IT>
    }
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	20000180 	.word	0x20000180
 8000b60:	20000114 	.word	0x20000114
 8000b64:	20000118 	.word	0x20000118
 8000b68:	2000014c 	.word	0x2000014c
 8000b6c:	20000115 	.word	0x20000115
 8000b70:	20000084 	.word	0x20000084
 8000b74:	40011400 	.word	0x40011400
 8000b78:	20000184 	.word	0x20000184
 8000b7c:	2000014b 	.word	0x2000014b
 8000b80:	2000014a 	.word	0x2000014a
 8000b84:	200000cc 	.word	0x200000cc

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <Error_Handler+0x8>

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bd2:	2007      	movs	r0, #7
 8000bd4:	f000 fb1c 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	@ 0x30
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a3a      	ldr	r2, [pc, #232]	@ (8000cec <HAL_UART_MspInit+0x108>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d134      	bne.n	8000c70 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
 8000c0a:	4b39      	ldr	r3, [pc, #228]	@ (8000cf0 <HAL_UART_MspInit+0x10c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	4a38      	ldr	r2, [pc, #224]	@ (8000cf0 <HAL_UART_MspInit+0x10c>)
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c16:	4b36      	ldr	r3, [pc, #216]	@ (8000cf0 <HAL_UART_MspInit+0x10c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c1e:	61bb      	str	r3, [r7, #24]
 8000c20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	4b32      	ldr	r3, [pc, #200]	@ (8000cf0 <HAL_UART_MspInit+0x10c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a31      	ldr	r2, [pc, #196]	@ (8000cf0 <HAL_UART_MspInit+0x10c>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf0 <HAL_UART_MspInit+0x10c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	4826      	ldr	r0, [pc, #152]	@ (8000cf4 <HAL_UART_MspInit+0x110>)
 8000c5a:	f000 fbad 	bl	80013b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2026      	movs	r0, #38	@ 0x26
 8000c64:	f000 fadf 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c68:	2026      	movs	r0, #38	@ 0x26
 8000c6a:	f000 faf8 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c6e:	e038      	b.n	8000ce2 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a20      	ldr	r2, [pc, #128]	@ (8000cf8 <HAL_UART_MspInit+0x114>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d133      	bne.n	8000ce2 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <HAL_UART_MspInit+0x10c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf0 <HAL_UART_MspInit+0x10c>)
 8000c84:	f043 0320 	orr.w	r3, r3, #32
 8000c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <HAL_UART_MspInit+0x10c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	f003 0320 	and.w	r3, r3, #32
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <HAL_UART_MspInit+0x10c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a14      	ldr	r2, [pc, #80]	@ (8000cf0 <HAL_UART_MspInit+0x10c>)
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <HAL_UART_MspInit+0x10c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0304 	and.w	r3, r3, #4
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cb2:	23c0      	movs	r3, #192	@ 0xc0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480b      	ldr	r0, [pc, #44]	@ (8000cfc <HAL_UART_MspInit+0x118>)
 8000cce:	f000 fb73 	bl	80013b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2047      	movs	r0, #71	@ 0x47
 8000cd8:	f000 faa5 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000cdc:	2047      	movs	r0, #71	@ 0x47
 8000cde:	f000 fabe 	bl	800125e <HAL_NVIC_EnableIRQ>
}
 8000ce2:	bf00      	nop
 8000ce4:	3730      	adds	r7, #48	@ 0x30
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40004400 	.word	0x40004400
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40011400 	.word	0x40011400
 8000cfc:	40020800 	.word	0x40020800

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <NMI_Handler+0x4>

08000d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <MemManage_Handler+0x4>

08000d18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d56:	f000 f96b 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <USART2_IRQHandler+0x10>)
 8000d66:	f001 fa5d 	bl	8002224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000084 	.word	0x20000084

08000d74 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <USART6_IRQHandler+0x10>)
 8000d7a:	f001 fa53 	bl	8002224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000cc 	.word	0x200000cc

08000d88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return 1;
 8000d8c:	2301      	movs	r3, #1
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <_kill>:

int _kill(int pid, int sig)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000da2:	f002 fc69 	bl	8003678 <__errno>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2216      	movs	r2, #22
 8000daa:	601a      	str	r2, [r3, #0]
  return -1;
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_exit>:

void _exit (int status)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ffe7 	bl	8000d98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dca:	bf00      	nop
 8000dcc:	e7fd      	b.n	8000dca <_exit+0x12>

08000dce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e00a      	b.n	8000df6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000de0:	f3af 8000 	nop.w
 8000de4:	4601      	mov	r1, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1c5a      	adds	r2, r3, #1
 8000dea:	60ba      	str	r2, [r7, #8]
 8000dec:	b2ca      	uxtb	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf0      	blt.n	8000de0 <_read+0x12>
  }

  return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	e009      	b.n	8000e2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1c5a      	adds	r2, r3, #1
 8000e1e:	60ba      	str	r2, [r7, #8]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fe22 	bl	8000a6c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	dbf1      	blt.n	8000e1a <_write+0x12>
  }
  return len;
 8000e36:	687b      	ldr	r3, [r7, #4]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_close>:

int _close(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e68:	605a      	str	r2, [r3, #4]
  return 0;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_isatty>:

int _isatty(int file)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e80:	2301      	movs	r3, #1
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb0:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <_sbrk+0x5c>)
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <_sbrk+0x60>)
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ebc:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <_sbrk+0x64>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	@ (8000f10 <_sbrk+0x68>)
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eca:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d207      	bcs.n	8000ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed8:	f002 fbce 	bl	8003678 <__errno>
 8000edc:	4603      	mov	r3, r0
 8000ede:	220c      	movs	r2, #12
 8000ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	e009      	b.n	8000efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eee:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a05      	ldr	r2, [pc, #20]	@ (8000f0c <_sbrk+0x64>)
 8000ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20020000 	.word	0x20020000
 8000f08:	00000400 	.word	0x00000400
 8000f0c:	20000188 	.word	0x20000188
 8000f10:	200002e0 	.word	0x200002e0

08000f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	@ (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f3c:	f7ff ffea 	bl	8000f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	@ (8000f74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	@ (8000f78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	@ (8000f7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	@ (8000f84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f66:	f002 fb8d 	bl	8003684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fb19 	bl	80005a0 <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f7c:	080046f0 	.word	0x080046f0
  ldr r2, =_sbss
 8000f80:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f84:	200002dc 	.word	0x200002dc

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <HAL_Init+0x40>)
 8000f96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <HAL_Init+0x40>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	@ (8000fcc <HAL_Init+0x40>)
 8000fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f92b 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f808 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fde8 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023c00 	.word	0x40023c00

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f943 	bl	800127a <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 f90b 	bl	8001226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	@ (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000000 	.word	0x20000000
 8001028:	20000008 	.word	0x20000008
 800102c:	20000004 	.word	0x20000004

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008
 8001054:	2000018c 	.word	0x2000018c

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	@ (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	2000018c 	.word	0x2000018c

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4907      	ldr	r1, [pc, #28]	@ (800110c <__NVIC_EnableIRQ+0x38>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	@ (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	@ (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	@ 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	@ 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011dc:	d301      	bcc.n	80011e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <SysTick_Config+0x40>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	210f      	movs	r1, #15
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f7ff ff8e 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <SysTick_Config+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	@ (800120c <SysTick_Config+0x40>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff29 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff3e 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff8e 	bl	8001164 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5d 	bl	8001110 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff31 	bl	80010d4 <__NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffa2 	bl	80011cc <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff feda 	bl	8001058 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d008      	beq.n	80012c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e052      	b.n	800136a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0216 	bic.w	r2, r2, #22
 80012d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d103      	bne.n	80012f4 <HAL_DMA_Abort+0x62>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d007      	beq.n	8001304 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0208 	bic.w	r2, r2, #8
 8001302:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001314:	e013      	b.n	800133e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001316:	f7ff fe9f 	bl	8001058 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b05      	cmp	r3, #5
 8001322:	d90c      	bls.n	800133e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2220      	movs	r2, #32
 8001328:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2203      	movs	r2, #3
 800132e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e015      	b.n	800136a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e4      	bne.n	8001316 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001350:	223f      	movs	r2, #63	@ 0x3f
 8001352:	409a      	lsls	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d004      	beq.n	8001390 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2280      	movs	r2, #128	@ 0x80
 800138a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e00c      	b.n	80013aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2205      	movs	r2, #5
 8001394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0201 	bic.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	@ 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	e159      	b.n	8001688 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d4:	2201      	movs	r2, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f040 8148 	bne.w	8001682 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d005      	beq.n	800140a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001406:	2b02      	cmp	r3, #2
 8001408:	d130      	bne.n	800146c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001440:	2201      	movs	r2, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 0201 	and.w	r2, r3, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b03      	cmp	r3, #3
 8001476:	d017      	beq.n	80014a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d123      	bne.n	80014fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	08da      	lsrs	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3208      	adds	r2, #8
 80014f6:	69b9      	ldr	r1, [r7, #24]
 80014f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0203 	and.w	r2, r3, #3
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80a2 	beq.w	8001682 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b57      	ldr	r3, [pc, #348]	@ (80016a0 <HAL_GPIO_Init+0x2e8>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	4a56      	ldr	r2, [pc, #344]	@ (80016a0 <HAL_GPIO_Init+0x2e8>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800154c:	6453      	str	r3, [r2, #68]	@ 0x44
 800154e:	4b54      	ldr	r3, [pc, #336]	@ (80016a0 <HAL_GPIO_Init+0x2e8>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155a:	4a52      	ldr	r2, [pc, #328]	@ (80016a4 <HAL_GPIO_Init+0x2ec>)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a49      	ldr	r2, [pc, #292]	@ (80016a8 <HAL_GPIO_Init+0x2f0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d019      	beq.n	80015ba <HAL_GPIO_Init+0x202>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a48      	ldr	r2, [pc, #288]	@ (80016ac <HAL_GPIO_Init+0x2f4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0x1fe>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a47      	ldr	r2, [pc, #284]	@ (80016b0 <HAL_GPIO_Init+0x2f8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d00d      	beq.n	80015b2 <HAL_GPIO_Init+0x1fa>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a46      	ldr	r2, [pc, #280]	@ (80016b4 <HAL_GPIO_Init+0x2fc>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d007      	beq.n	80015ae <HAL_GPIO_Init+0x1f6>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a45      	ldr	r2, [pc, #276]	@ (80016b8 <HAL_GPIO_Init+0x300>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_GPIO_Init+0x1f2>
 80015a6:	2304      	movs	r3, #4
 80015a8:	e008      	b.n	80015bc <HAL_GPIO_Init+0x204>
 80015aa:	2307      	movs	r3, #7
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x204>
 80015ae:	2303      	movs	r3, #3
 80015b0:	e004      	b.n	80015bc <HAL_GPIO_Init+0x204>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e002      	b.n	80015bc <HAL_GPIO_Init+0x204>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <HAL_GPIO_Init+0x204>
 80015ba:	2300      	movs	r3, #0
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	f002 0203 	and.w	r2, r2, #3
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	4093      	lsls	r3, r2
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015cc:	4935      	ldr	r1, [pc, #212]	@ (80016a4 <HAL_GPIO_Init+0x2ec>)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015da:	4b38      	ldr	r3, [pc, #224]	@ (80016bc <HAL_GPIO_Init+0x304>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015fe:	4a2f      	ldr	r2, [pc, #188]	@ (80016bc <HAL_GPIO_Init+0x304>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001604:	4b2d      	ldr	r3, [pc, #180]	@ (80016bc <HAL_GPIO_Init+0x304>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001628:	4a24      	ldr	r2, [pc, #144]	@ (80016bc <HAL_GPIO_Init+0x304>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800162e:	4b23      	ldr	r3, [pc, #140]	@ (80016bc <HAL_GPIO_Init+0x304>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001652:	4a1a      	ldr	r2, [pc, #104]	@ (80016bc <HAL_GPIO_Init+0x304>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001658:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <HAL_GPIO_Init+0x304>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800167c:	4a0f      	ldr	r2, [pc, #60]	@ (80016bc <HAL_GPIO_Init+0x304>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3301      	adds	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	2b0f      	cmp	r3, #15
 800168c:	f67f aea2 	bls.w	80013d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3724      	adds	r7, #36	@ 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40013c00 	.word	0x40013c00

080016c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
 80016cc:	4613      	mov	r3, r2
 80016ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d0:	787b      	ldrb	r3, [r7, #1]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016dc:	e003      	b.n	80016e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016de:	887b      	ldrh	r3, [r7, #2]
 80016e0:	041a      	lsls	r2, r3, #16
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	619a      	str	r2, [r3, #24]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e267      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d075      	beq.n	80017fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001712:	4b88      	ldr	r3, [pc, #544]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b04      	cmp	r3, #4
 800171c:	d00c      	beq.n	8001738 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800171e:	4b85      	ldr	r3, [pc, #532]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001726:	2b08      	cmp	r3, #8
 8001728:	d112      	bne.n	8001750 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800172a:	4b82      	ldr	r3, [pc, #520]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001736:	d10b      	bne.n	8001750 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001738:	4b7e      	ldr	r3, [pc, #504]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d05b      	beq.n	80017fc <HAL_RCC_OscConfig+0x108>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d157      	bne.n	80017fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e242      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001758:	d106      	bne.n	8001768 <HAL_RCC_OscConfig+0x74>
 800175a:	4b76      	ldr	r3, [pc, #472]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a75      	ldr	r2, [pc, #468]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e01d      	b.n	80017a4 <HAL_RCC_OscConfig+0xb0>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x98>
 8001772:	4b70      	ldr	r3, [pc, #448]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a6f      	ldr	r2, [pc, #444]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b6d      	ldr	r3, [pc, #436]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6c      	ldr	r2, [pc, #432]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0xb0>
 800178c:	4b69      	ldr	r3, [pc, #420]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a68      	ldr	r2, [pc, #416]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b66      	ldr	r3, [pc, #408]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a65      	ldr	r2, [pc, #404]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff fc54 	bl	8001058 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fc50 	bl	8001058 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	@ 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e207      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0xc0>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fc40 	bl	8001058 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fc3c 	bl	8001058 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	@ 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e1f3      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	4b51      	ldr	r3, [pc, #324]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0xe8>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d063      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800180a:	4b4a      	ldr	r3, [pc, #296]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001816:	4b47      	ldr	r3, [pc, #284]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800181e:	2b08      	cmp	r3, #8
 8001820:	d11c      	bne.n	800185c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001822:	4b44      	ldr	r3, [pc, #272]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d116      	bne.n	800185c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182e:	4b41      	ldr	r3, [pc, #260]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_RCC_OscConfig+0x152>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e1c7      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001846:	4b3b      	ldr	r3, [pc, #236]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4937      	ldr	r1, [pc, #220]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	e03a      	b.n	80018d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001864:	4b34      	ldr	r3, [pc, #208]	@ (8001938 <HAL_RCC_OscConfig+0x244>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186a:	f7ff fbf5 	bl	8001058 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff fbf1 	bl	8001058 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e1a8      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001884:	4b2b      	ldr	r3, [pc, #172]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b28      	ldr	r3, [pc, #160]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4925      	ldr	r1, [pc, #148]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
 80018a4:	e015      	b.n	80018d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a6:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <HAL_RCC_OscConfig+0x244>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fbd4 	bl	8001058 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff fbd0 	bl	8001058 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e187      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d036      	beq.n	800194c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d016      	beq.n	8001914 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <HAL_RCC_OscConfig+0x248>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ec:	f7ff fbb4 	bl	8001058 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f4:	f7ff fbb0 	bl	8001058 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e167      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001906:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_RCC_OscConfig+0x240>)
 8001908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x200>
 8001912:	e01b      	b.n	800194c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_RCC_OscConfig+0x248>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191a:	f7ff fb9d 	bl	8001058 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001920:	e00e      	b.n	8001940 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001922:	f7ff fb99 	bl	8001058 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d907      	bls.n	8001940 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e150      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
 8001934:	40023800 	.word	0x40023800
 8001938:	42470000 	.word	0x42470000
 800193c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001940:	4b88      	ldr	r3, [pc, #544]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1ea      	bne.n	8001922 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 8097 	beq.w	8001a88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800195e:	4b81      	ldr	r3, [pc, #516]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10f      	bne.n	800198a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	4a7c      	ldr	r2, [pc, #496]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	@ 0x40
 800197a:	4b7a      	ldr	r3, [pc, #488]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001986:	2301      	movs	r3, #1
 8001988:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	4b77      	ldr	r3, [pc, #476]	@ (8001b68 <HAL_RCC_OscConfig+0x474>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d118      	bne.n	80019c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001996:	4b74      	ldr	r3, [pc, #464]	@ (8001b68 <HAL_RCC_OscConfig+0x474>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a73      	ldr	r2, [pc, #460]	@ (8001b68 <HAL_RCC_OscConfig+0x474>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a2:	f7ff fb59 	bl	8001058 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019aa:	f7ff fb55 	bl	8001058 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e10c      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001b68 <HAL_RCC_OscConfig+0x474>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x2ea>
 80019d0:	4b64      	ldr	r3, [pc, #400]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d4:	4a63      	ldr	r2, [pc, #396]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6713      	str	r3, [r2, #112]	@ 0x70
 80019dc:	e01c      	b.n	8001a18 <HAL_RCC_OscConfig+0x324>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x30c>
 80019e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0x324>
 8001a00:	4b58      	ldr	r3, [pc, #352]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a04:	4a57      	ldr	r2, [pc, #348]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a0c:	4b55      	ldr	r3, [pc, #340]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a10:	4a54      	ldr	r2, [pc, #336]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a12:	f023 0304 	bic.w	r3, r3, #4
 8001a16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d015      	beq.n	8001a4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a20:	f7ff fb1a 	bl	8001058 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a28:	f7ff fb16 	bl	8001058 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e0cb      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3e:	4b49      	ldr	r3, [pc, #292]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0ee      	beq.n	8001a28 <HAL_RCC_OscConfig+0x334>
 8001a4a:	e014      	b.n	8001a76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fb04 	bl	8001058 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f7ff fb00 	bl	8001058 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e0b5      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1ee      	bne.n	8001a54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d105      	bne.n	8001a88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7c:	4b39      	ldr	r3, [pc, #228]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	4a38      	ldr	r2, [pc, #224]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80a1 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a92:	4b34      	ldr	r3, [pc, #208]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d05c      	beq.n	8001b58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d141      	bne.n	8001b2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa6:	4b31      	ldr	r3, [pc, #196]	@ (8001b6c <HAL_RCC_OscConfig+0x478>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff fad4 	bl	8001058 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7ff fad0 	bl	8001058 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e087      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac6:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69da      	ldr	r2, [r3, #28]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae0:	019b      	lsls	r3, r3, #6
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae8:	085b      	lsrs	r3, r3, #1
 8001aea:	3b01      	subs	r3, #1
 8001aec:	041b      	lsls	r3, r3, #16
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af4:	061b      	lsls	r3, r3, #24
 8001af6:	491b      	ldr	r1, [pc, #108]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <HAL_RCC_OscConfig+0x478>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff faa9 	bl	8001058 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7ff faa5 	bl	8001058 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e05c      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x416>
 8001b28:	e054      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <HAL_RCC_OscConfig+0x478>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff fa92 	bl	8001058 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b38:	f7ff fa8e 	bl	8001058 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e045      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_RCC_OscConfig+0x470>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x444>
 8001b56:	e03d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e038      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_RCC_OscConfig+0x4ec>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d028      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d121      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d11a      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ba6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d111      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb6:	085b      	lsrs	r3, r3, #1
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0cc      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b68      	ldr	r3, [pc, #416]	@ (8001d9c <HAL_RCC_ClockConfig+0x1b8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d90c      	bls.n	8001c20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b65      	ldr	r3, [pc, #404]	@ (8001d9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b63      	ldr	r3, [pc, #396]	@ (8001d9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0b8      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d020      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c38:	4b59      	ldr	r3, [pc, #356]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4a58      	ldr	r2, [pc, #352]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c50:	4b53      	ldr	r3, [pc, #332]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4a52      	ldr	r2, [pc, #328]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c5c:	4b50      	ldr	r3, [pc, #320]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	494d      	ldr	r1, [pc, #308]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d044      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	4b47      	ldr	r3, [pc, #284]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d119      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e07f      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d003      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e06f      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e067      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc2:	4b37      	ldr	r3, [pc, #220]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f023 0203 	bic.w	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4934      	ldr	r1, [pc, #208]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd4:	f7ff f9c0 	bl	8001058 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7ff f9bc 	bl	8001058 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e04f      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 020c 	and.w	r2, r3, #12
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1eb      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d04:	4b25      	ldr	r3, [pc, #148]	@ (8001d9c <HAL_RCC_ClockConfig+0x1b8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d20c      	bcs.n	8001d2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b22      	ldr	r3, [pc, #136]	@ (8001d9c <HAL_RCC_ClockConfig+0x1b8>)
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b20      	ldr	r3, [pc, #128]	@ (8001d9c <HAL_RCC_ClockConfig+0x1b8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e032      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d38:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4916      	ldr	r1, [pc, #88]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d56:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	490e      	ldr	r1, [pc, #56]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d6a:	f000 f821 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	490a      	ldr	r1, [pc, #40]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d7c:	5ccb      	ldrb	r3, [r1, r3]
 8001d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d82:	4a09      	ldr	r2, [pc, #36]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d86:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <HAL_RCC_ClockConfig+0x1c8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f920 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023c00 	.word	0x40023c00
 8001da0:	40023800 	.word	0x40023800
 8001da4:	080045e8 	.word	0x080045e8
 8001da8:	20000000 	.word	0x20000000
 8001dac:	20000004 	.word	0x20000004

08001db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001db4:	b094      	sub	sp, #80	@ 0x50
 8001db6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dc8:	4b79      	ldr	r3, [pc, #484]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d00d      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x40>
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	f200 80e1 	bhi.w	8001f9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d003      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0x3a>
 8001de2:	e0db      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4b73      	ldr	r3, [pc, #460]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001de6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001de8:	e0db      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dea:	4b73      	ldr	r3, [pc, #460]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dee:	e0d8      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001df0:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001df8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d063      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e06:	4b6a      	ldr	r3, [pc, #424]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	099b      	lsrs	r3, r3, #6
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e22:	4622      	mov	r2, r4
 8001e24:	462b      	mov	r3, r5
 8001e26:	f04f 0000 	mov.w	r0, #0
 8001e2a:	f04f 0100 	mov.w	r1, #0
 8001e2e:	0159      	lsls	r1, r3, #5
 8001e30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e34:	0150      	lsls	r0, r2, #5
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4621      	mov	r1, r4
 8001e3c:	1a51      	subs	r1, r2, r1
 8001e3e:	6139      	str	r1, [r7, #16]
 8001e40:	4629      	mov	r1, r5
 8001e42:	eb63 0301 	sbc.w	r3, r3, r1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e54:	4659      	mov	r1, fp
 8001e56:	018b      	lsls	r3, r1, #6
 8001e58:	4651      	mov	r1, sl
 8001e5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e5e:	4651      	mov	r1, sl
 8001e60:	018a      	lsls	r2, r1, #6
 8001e62:	4651      	mov	r1, sl
 8001e64:	ebb2 0801 	subs.w	r8, r2, r1
 8001e68:	4659      	mov	r1, fp
 8001e6a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e82:	4690      	mov	r8, r2
 8001e84:	4699      	mov	r9, r3
 8001e86:	4623      	mov	r3, r4
 8001e88:	eb18 0303 	adds.w	r3, r8, r3
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	462b      	mov	r3, r5
 8001e90:	eb49 0303 	adc.w	r3, r9, r3
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	024b      	lsls	r3, r1, #9
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eac:	4621      	mov	r1, r4
 8001eae:	024a      	lsls	r2, r1, #9
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001eba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ebc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ec0:	f7fe f9f6 	bl	80002b0 <__aeabi_uldivmod>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4613      	mov	r3, r2
 8001eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ecc:	e058      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ece:	4b38      	ldr	r3, [pc, #224]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	099b      	lsrs	r3, r3, #6
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	4611      	mov	r1, r2
 8001eda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ede:	623b      	str	r3, [r7, #32]
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ee8:	4642      	mov	r2, r8
 8001eea:	464b      	mov	r3, r9
 8001eec:	f04f 0000 	mov.w	r0, #0
 8001ef0:	f04f 0100 	mov.w	r1, #0
 8001ef4:	0159      	lsls	r1, r3, #5
 8001ef6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001efa:	0150      	lsls	r0, r2, #5
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4641      	mov	r1, r8
 8001f02:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f06:	4649      	mov	r1, r9
 8001f08:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f20:	ebb2 040a 	subs.w	r4, r2, sl
 8001f24:	eb63 050b 	sbc.w	r5, r3, fp
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	00eb      	lsls	r3, r5, #3
 8001f32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f36:	00e2      	lsls	r2, r4, #3
 8001f38:	4614      	mov	r4, r2
 8001f3a:	461d      	mov	r5, r3
 8001f3c:	4643      	mov	r3, r8
 8001f3e:	18e3      	adds	r3, r4, r3
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	464b      	mov	r3, r9
 8001f44:	eb45 0303 	adc.w	r3, r5, r3
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f56:	4629      	mov	r1, r5
 8001f58:	028b      	lsls	r3, r1, #10
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f60:	4621      	mov	r1, r4
 8001f62:	028a      	lsls	r2, r1, #10
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	61fa      	str	r2, [r7, #28]
 8001f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f74:	f7fe f99c 	bl	80002b0 <__aeabi_uldivmod>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f80:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001f90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f9a:	e002      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3750      	adds	r7, #80	@ 0x50
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	00f42400 	.word	0x00f42400
 8001fb8:	007a1200 	.word	0x007a1200

08001fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	@ (8001fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000000 	.word	0x20000000

08001fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fd8:	f7ff fff0 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	0a9b      	lsrs	r3, r3, #10
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	4903      	ldr	r1, [pc, #12]	@ (8001ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	080045f8 	.word	0x080045f8

08001ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002000:	f7ff ffdc 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8002004:	4602      	mov	r2, r0
 8002006:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	0b5b      	lsrs	r3, r3, #13
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	4903      	ldr	r1, [pc, #12]	@ (8002020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002012:	5ccb      	ldrb	r3, [r1, r3]
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002018:	4618      	mov	r0, r3
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40023800 	.word	0x40023800
 8002020:	080045f8 	.word	0x080045f8

08002024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e042      	b.n	80020bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fdca 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	@ 0x24
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fdbd 	bl	8002be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800207c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800208c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800209c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	@ 0x28
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d175      	bne.n	80021d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HAL_UART_Transmit+0x2c>
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e06e      	b.n	80021d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2221      	movs	r2, #33	@ 0x21
 80020fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002102:	f7fe ffa9 	bl	8001058 <HAL_GetTick>
 8002106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	88fa      	ldrh	r2, [r7, #6]
 800210c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	88fa      	ldrh	r2, [r7, #6]
 8002112:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800211c:	d108      	bne.n	8002130 <HAL_UART_Transmit+0x6c>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d104      	bne.n	8002130 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	e003      	b.n	8002138 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002138:	e02e      	b.n	8002198 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2200      	movs	r2, #0
 8002142:	2180      	movs	r1, #128	@ 0x80
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 fb1f 	bl	8002788 <UART_WaitOnFlagUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e03a      	b.n	80021d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10b      	bne.n	800217a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002170:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	3302      	adds	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	e007      	b.n	800218a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	781a      	ldrb	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	3301      	adds	r3, #1
 8002188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800218e:	b29b      	uxth	r3, r3
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1cb      	bne.n	800213a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2200      	movs	r2, #0
 80021aa:	2140      	movs	r1, #64	@ 0x40
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 faeb 	bl	8002788 <UART_WaitOnFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e006      	b.n	80021d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	e000      	b.n	80021d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021d0:	2302      	movs	r3, #2
  }
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3720      	adds	r7, #32
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	4613      	mov	r3, r2
 80021e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d112      	bne.n	800221a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_UART_Receive_IT+0x26>
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e00b      	b.n	800221c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	461a      	mov	r2, r3
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fb12 	bl	800283a <UART_Start_Receive_IT>
 8002216:	4603      	mov	r3, r0
 8002218:	e000      	b.n	800221c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800221a:	2302      	movs	r3, #2
  }
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0ba      	sub	sp, #232	@ 0xe8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002250:	2300      	movs	r3, #0
 8002252:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800226a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <HAL_UART_IRQHandler+0x66>
 8002276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fbf2 	bl	8002a6c <UART_Receive_IT>
      return;
 8002288:	e25b      	b.n	8002742 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800228a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 80de 	beq.w	8002450 <HAL_UART_IRQHandler+0x22c>
 8002294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d106      	bne.n	80022ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80d1 	beq.w	8002450 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00b      	beq.n	80022d2 <HAL_UART_IRQHandler+0xae>
 80022ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <HAL_UART_IRQHandler+0xd2>
 80022de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	f043 0202 	orr.w	r2, r3, #2
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_UART_IRQHandler+0xf6>
 8002302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	f043 0204 	orr.w	r2, r3, #4
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800231a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d011      	beq.n	800234a <HAL_UART_IRQHandler+0x126>
 8002326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b00      	cmp	r3, #0
 8002330:	d105      	bne.n	800233e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	f043 0208 	orr.w	r2, r3, #8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 81f2 	beq.w	8002738 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_UART_IRQHandler+0x14e>
 8002360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fb7d 	bl	8002a6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800237c:	2b40      	cmp	r3, #64	@ 0x40
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <HAL_UART_IRQHandler+0x17a>
 8002396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d04f      	beq.n	800243e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fa85 	bl	80028ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ae:	2b40      	cmp	r3, #64	@ 0x40
 80023b0:	d141      	bne.n	8002436 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3314      	adds	r3, #20
 80023b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023c0:	e853 3f00 	ldrex	r3, [r3]
 80023c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80023c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	3314      	adds	r3, #20
 80023da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80023de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80023e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80023ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80023ee:	e841 2300 	strex	r3, r2, [r1]
 80023f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80023f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1d9      	bne.n	80023b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d013      	beq.n	800242e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240a:	4a7e      	ldr	r2, [pc, #504]	@ (8002604 <HAL_UART_IRQHandler+0x3e0>)
 800240c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe ffad 	bl	8001372 <HAL_DMA_Abort_IT>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d016      	beq.n	800244c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002428:	4610      	mov	r0, r2
 800242a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800242c:	e00e      	b.n	800244c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f994 	bl	800275c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002434:	e00a      	b.n	800244c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f990 	bl	800275c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800243c:	e006      	b.n	800244c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f98c 	bl	800275c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800244a:	e175      	b.n	8002738 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800244c:	bf00      	nop
    return;
 800244e:	e173      	b.n	8002738 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002454:	2b01      	cmp	r3, #1
 8002456:	f040 814f 	bne.w	80026f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800245a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8148 	beq.w	80026f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8141 	beq.w	80026f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002496:	2b40      	cmp	r3, #64	@ 0x40
 8002498:	f040 80b6 	bne.w	8002608 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 8145 	beq.w	800273c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024ba:	429a      	cmp	r2, r3
 80024bc:	f080 813e 	bcs.w	800273c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024d2:	f000 8088 	beq.w	80025e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	330c      	adds	r3, #12
 80024dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024e4:	e853 3f00 	ldrex	r3, [r3]
 80024e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80024ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	330c      	adds	r3, #12
 80024fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002502:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002506:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800250e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002512:	e841 2300 	strex	r3, r2, [r1]
 8002516:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800251a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1d9      	bne.n	80024d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3314      	adds	r3, #20
 8002528:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800252c:	e853 3f00 	ldrex	r3, [r3]
 8002530:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3314      	adds	r3, #20
 8002542:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002546:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800254a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800254e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002552:	e841 2300 	strex	r3, r2, [r1]
 8002556:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002558:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1e1      	bne.n	8002522 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3314      	adds	r3, #20
 8002564:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002566:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002568:	e853 3f00 	ldrex	r3, [r3]
 800256c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800256e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002570:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002574:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	3314      	adds	r3, #20
 800257e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002582:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002584:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002586:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002588:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800258a:	e841 2300 	strex	r3, r2, [r1]
 800258e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002590:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1e3      	bne.n	800255e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	330c      	adds	r3, #12
 80025aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025ae:	e853 3f00 	ldrex	r3, [r3]
 80025b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80025b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025b6:	f023 0310 	bic.w	r3, r3, #16
 80025ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	330c      	adds	r3, #12
 80025c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80025c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80025ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025d0:	e841 2300 	strex	r3, r2, [r1]
 80025d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80025d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e3      	bne.n	80025a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fe56 	bl	8001292 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2202      	movs	r2, #2
 80025ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	4619      	mov	r1, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f8b7 	bl	8002770 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002602:	e09b      	b.n	800273c <HAL_UART_IRQHandler+0x518>
 8002604:	08002975 	.word	0x08002975
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002610:	b29b      	uxth	r3, r3
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 808e 	beq.w	8002740 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002624:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8089 	beq.w	8002740 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	330c      	adds	r3, #12
 8002634:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002638:	e853 3f00 	ldrex	r3, [r3]
 800263c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800263e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002640:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002644:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	330c      	adds	r3, #12
 800264e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002652:	647a      	str	r2, [r7, #68]	@ 0x44
 8002654:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002656:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002658:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800265a:	e841 2300 	strex	r3, r2, [r1]
 800265e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1e3      	bne.n	800262e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3314      	adds	r3, #20
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	623b      	str	r3, [r7, #32]
   return(result);
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3314      	adds	r3, #20
 8002686:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800268a:	633a      	str	r2, [r7, #48]	@ 0x30
 800268c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e3      	bne.n	8002666 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	330c      	adds	r3, #12
 80026b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	e853 3f00 	ldrex	r3, [r3]
 80026ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0310 	bic.w	r3, r3, #16
 80026c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	330c      	adds	r3, #12
 80026cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80026d0:	61fa      	str	r2, [r7, #28]
 80026d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d4:	69b9      	ldr	r1, [r7, #24]
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	e841 2300 	strex	r3, r2, [r1]
 80026dc:	617b      	str	r3, [r7, #20]
   return(result);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e3      	bne.n	80026ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80026ee:	4619      	mov	r1, r3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f83d 	bl	8002770 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026f6:	e023      	b.n	8002740 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002700:	2b00      	cmp	r3, #0
 8002702:	d009      	beq.n	8002718 <HAL_UART_IRQHandler+0x4f4>
 8002704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f943 	bl	800299c <UART_Transmit_IT>
    return;
 8002716:	e014      	b.n	8002742 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800271c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00e      	beq.n	8002742 <HAL_UART_IRQHandler+0x51e>
 8002724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f983 	bl	8002a3c <UART_EndTransmit_IT>
    return;
 8002736:	e004      	b.n	8002742 <HAL_UART_IRQHandler+0x51e>
    return;
 8002738:	bf00      	nop
 800273a:	e002      	b.n	8002742 <HAL_UART_IRQHandler+0x51e>
      return;
 800273c:	bf00      	nop
 800273e:	e000      	b.n	8002742 <HAL_UART_IRQHandler+0x51e>
      return;
 8002740:	bf00      	nop
  }
}
 8002742:	37e8      	adds	r7, #232	@ 0xe8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	4613      	mov	r3, r2
 8002796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002798:	e03b      	b.n	8002812 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d037      	beq.n	8002812 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a2:	f7fe fc59 	bl	8001058 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	6a3a      	ldr	r2, [r7, #32]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d302      	bcc.n	80027b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e03a      	b.n	8002832 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d023      	beq.n	8002812 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b80      	cmp	r3, #128	@ 0x80
 80027ce:	d020      	beq.n	8002812 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b40      	cmp	r3, #64	@ 0x40
 80027d4:	d01d      	beq.n	8002812 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d116      	bne.n	8002812 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f857 	bl	80028ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2208      	movs	r2, #8
 8002804:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e00f      	b.n	8002832 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	4013      	ands	r3, r2
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	429a      	cmp	r2, r3
 8002820:	bf0c      	ite	eq
 8002822:	2301      	moveq	r3, #1
 8002824:	2300      	movne	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	429a      	cmp	r2, r3
 800282e:	d0b4      	beq.n	800279a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	4613      	mov	r3, r2
 8002846:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	88fa      	ldrh	r2, [r7, #6]
 8002852:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	88fa      	ldrh	r2, [r7, #6]
 8002858:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2222      	movs	r2, #34	@ 0x22
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800287e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0220 	orr.w	r2, r2, #32
 800289e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b095      	sub	sp, #84	@ 0x54
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	330c      	adds	r3, #12
 80028bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c0:	e853 3f00 	ldrex	r3, [r3]
 80028c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	330c      	adds	r3, #12
 80028d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80028d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028de:	e841 2300 	strex	r3, r2, [r1]
 80028e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1e5      	bne.n	80028b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3314      	adds	r3, #20
 80028f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	e853 3f00 	ldrex	r3, [r3]
 80028f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3314      	adds	r3, #20
 8002908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800290a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800290c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002912:	e841 2300 	strex	r3, r2, [r1]
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1e5      	bne.n	80028ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	2b01      	cmp	r3, #1
 8002924:	d119      	bne.n	800295a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	330c      	adds	r3, #12
 800292c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	e853 3f00 	ldrex	r3, [r3]
 8002934:	60bb      	str	r3, [r7, #8]
   return(result);
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f023 0310 	bic.w	r3, r3, #16
 800293c:	647b      	str	r3, [r7, #68]	@ 0x44
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	330c      	adds	r3, #12
 8002944:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002946:	61ba      	str	r2, [r7, #24]
 8002948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	6979      	ldr	r1, [r7, #20]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	613b      	str	r3, [r7, #16]
   return(result);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e5      	bne.n	8002926 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002968:	bf00      	nop
 800296a:	3754      	adds	r7, #84	@ 0x54
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002980:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff fee4 	bl	800275c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b21      	cmp	r3, #33	@ 0x21
 80029ae:	d13e      	bne.n	8002a2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029b8:	d114      	bne.n	80029e4 <UART_Transmit_IT+0x48>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d110      	bne.n	80029e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	1c9a      	adds	r2, r3, #2
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	621a      	str	r2, [r3, #32]
 80029e2:	e008      	b.n	80029f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	1c59      	adds	r1, r3, #1
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6211      	str	r1, [r2, #32]
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4619      	mov	r1, r3
 8002a04:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10f      	bne.n	8002a2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e000      	b.n	8002a30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
  }
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff fe73 	bl	8002748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08c      	sub	sp, #48	@ 0x30
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b22      	cmp	r3, #34	@ 0x22
 8002a7e:	f040 80ae 	bne.w	8002bde <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a8a:	d117      	bne.n	8002abc <UART_Receive_IT+0x50>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d113      	bne.n	8002abc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	1c9a      	adds	r2, r3, #2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002aba:	e026      	b.n	8002b0a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ace:	d007      	beq.n	8002ae0 <UART_Receive_IT+0x74>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <UART_Receive_IT+0x82>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	e008      	b.n	8002b00 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	4619      	mov	r1, r3
 8002b18:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d15d      	bne.n	8002bda <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0220 	bic.w	r2, r2, #32
 8002b2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d135      	bne.n	8002bd0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	e853 3f00 	ldrex	r3, [r3]
 8002b78:	613b      	str	r3, [r7, #16]
   return(result);
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f023 0310 	bic.w	r3, r3, #16
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	330c      	adds	r3, #12
 8002b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b8a:	623a      	str	r2, [r7, #32]
 8002b8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8e:	69f9      	ldr	r1, [r7, #28]
 8002b90:	6a3a      	ldr	r2, [r7, #32]
 8002b92:	e841 2300 	strex	r3, r2, [r1]
 8002b96:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1e5      	bne.n	8002b6a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d10a      	bne.n	8002bc2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff fdd1 	bl	8002770 <HAL_UARTEx_RxEventCallback>
 8002bce:	e002      	b.n	8002bd6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7fd ff5d 	bl	8000a90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e002      	b.n	8002be0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002bde:	2302      	movs	r3, #2
  }
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3730      	adds	r7, #48	@ 0x30
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bec:	b0c0      	sub	sp, #256	@ 0x100
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c04:	68d9      	ldr	r1, [r3, #12]
 8002c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	ea40 0301 	orr.w	r3, r0, r1
 8002c10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c40:	f021 010c 	bic.w	r1, r1, #12
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c62:	6999      	ldr	r1, [r3, #24]
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	ea40 0301 	orr.w	r3, r0, r1
 8002c6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4b8f      	ldr	r3, [pc, #572]	@ (8002eb4 <UART_SetConfig+0x2cc>)
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d005      	beq.n	8002c88 <UART_SetConfig+0xa0>
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b8d      	ldr	r3, [pc, #564]	@ (8002eb8 <UART_SetConfig+0x2d0>)
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d104      	bne.n	8002c92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c88:	f7ff f9b8 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 8002c8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c90:	e003      	b.n	8002c9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c92:	f7ff f99f 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 8002c96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ca4:	f040 810c 	bne.w	8002ec0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cac:	2200      	movs	r2, #0
 8002cae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002cb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002cb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002cba:	4622      	mov	r2, r4
 8002cbc:	462b      	mov	r3, r5
 8002cbe:	1891      	adds	r1, r2, r2
 8002cc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002cc2:	415b      	adcs	r3, r3
 8002cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002cca:	4621      	mov	r1, r4
 8002ccc:	eb12 0801 	adds.w	r8, r2, r1
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	eb43 0901 	adc.w	r9, r3, r1
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cea:	4690      	mov	r8, r2
 8002cec:	4699      	mov	r9, r3
 8002cee:	4623      	mov	r3, r4
 8002cf0:	eb18 0303 	adds.w	r3, r8, r3
 8002cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002cf8:	462b      	mov	r3, r5
 8002cfa:	eb49 0303 	adc.w	r3, r9, r3
 8002cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d16:	460b      	mov	r3, r1
 8002d18:	18db      	adds	r3, r3, r3
 8002d1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	eb42 0303 	adc.w	r3, r2, r3
 8002d22:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d2c:	f7fd fac0 	bl	80002b0 <__aeabi_uldivmod>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4b61      	ldr	r3, [pc, #388]	@ (8002ebc <UART_SetConfig+0x2d4>)
 8002d36:	fba3 2302 	umull	r2, r3, r3, r2
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	011c      	lsls	r4, r3, #4
 8002d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d50:	4642      	mov	r2, r8
 8002d52:	464b      	mov	r3, r9
 8002d54:	1891      	adds	r1, r2, r2
 8002d56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d58:	415b      	adcs	r3, r3
 8002d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d60:	4641      	mov	r1, r8
 8002d62:	eb12 0a01 	adds.w	sl, r2, r1
 8002d66:	4649      	mov	r1, r9
 8002d68:	eb43 0b01 	adc.w	fp, r3, r1
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d80:	4692      	mov	sl, r2
 8002d82:	469b      	mov	fp, r3
 8002d84:	4643      	mov	r3, r8
 8002d86:	eb1a 0303 	adds.w	r3, sl, r3
 8002d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d8e:	464b      	mov	r3, r9
 8002d90:	eb4b 0303 	adc.w	r3, fp, r3
 8002d94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002da4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002da8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002dac:	460b      	mov	r3, r1
 8002dae:	18db      	adds	r3, r3, r3
 8002db0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002db2:	4613      	mov	r3, r2
 8002db4:	eb42 0303 	adc.w	r3, r2, r3
 8002db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002dbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002dc2:	f7fd fa75 	bl	80002b0 <__aeabi_uldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ebc <UART_SetConfig+0x2d4>)
 8002dce:	fba3 2301 	umull	r2, r3, r3, r1
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2264      	movs	r2, #100	@ 0x64
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	1acb      	subs	r3, r1, r3
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002de2:	4b36      	ldr	r3, [pc, #216]	@ (8002ebc <UART_SetConfig+0x2d4>)
 8002de4:	fba3 2302 	umull	r2, r3, r3, r2
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002df0:	441c      	add	r4, r3
 8002df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dfc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002e00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002e04:	4642      	mov	r2, r8
 8002e06:	464b      	mov	r3, r9
 8002e08:	1891      	adds	r1, r2, r2
 8002e0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e0c:	415b      	adcs	r3, r3
 8002e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e14:	4641      	mov	r1, r8
 8002e16:	1851      	adds	r1, r2, r1
 8002e18:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	414b      	adcs	r3, r1
 8002e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e2c:	4659      	mov	r1, fp
 8002e2e:	00cb      	lsls	r3, r1, #3
 8002e30:	4651      	mov	r1, sl
 8002e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e36:	4651      	mov	r1, sl
 8002e38:	00ca      	lsls	r2, r1, #3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4642      	mov	r2, r8
 8002e42:	189b      	adds	r3, r3, r2
 8002e44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e48:	464b      	mov	r3, r9
 8002e4a:	460a      	mov	r2, r1
 8002e4c:	eb42 0303 	adc.w	r3, r2, r3
 8002e50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e68:	460b      	mov	r3, r1
 8002e6a:	18db      	adds	r3, r3, r3
 8002e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e6e:	4613      	mov	r3, r2
 8002e70:	eb42 0303 	adc.w	r3, r2, r3
 8002e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e7e:	f7fd fa17 	bl	80002b0 <__aeabi_uldivmod>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4b0d      	ldr	r3, [pc, #52]	@ (8002ebc <UART_SetConfig+0x2d4>)
 8002e88:	fba3 1302 	umull	r1, r3, r3, r2
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	2164      	movs	r1, #100	@ 0x64
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	3332      	adds	r3, #50	@ 0x32
 8002e9a:	4a08      	ldr	r2, [pc, #32]	@ (8002ebc <UART_SetConfig+0x2d4>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	095b      	lsrs	r3, r3, #5
 8002ea2:	f003 0207 	and.w	r2, r3, #7
 8002ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4422      	add	r2, r4
 8002eae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002eb0:	e106      	b.n	80030c0 <UART_SetConfig+0x4d8>
 8002eb2:	bf00      	nop
 8002eb4:	40011000 	.word	0x40011000
 8002eb8:	40011400 	.word	0x40011400
 8002ebc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002eca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ece:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ed2:	4642      	mov	r2, r8
 8002ed4:	464b      	mov	r3, r9
 8002ed6:	1891      	adds	r1, r2, r2
 8002ed8:	6239      	str	r1, [r7, #32]
 8002eda:	415b      	adcs	r3, r3
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ee2:	4641      	mov	r1, r8
 8002ee4:	1854      	adds	r4, r2, r1
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	eb43 0501 	adc.w	r5, r3, r1
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	00eb      	lsls	r3, r5, #3
 8002ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002efa:	00e2      	lsls	r2, r4, #3
 8002efc:	4614      	mov	r4, r2
 8002efe:	461d      	mov	r5, r3
 8002f00:	4643      	mov	r3, r8
 8002f02:	18e3      	adds	r3, r4, r3
 8002f04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f08:	464b      	mov	r3, r9
 8002f0a:	eb45 0303 	adc.w	r3, r5, r3
 8002f0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f2e:	4629      	mov	r1, r5
 8002f30:	008b      	lsls	r3, r1, #2
 8002f32:	4621      	mov	r1, r4
 8002f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f38:	4621      	mov	r1, r4
 8002f3a:	008a      	lsls	r2, r1, #2
 8002f3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f40:	f7fd f9b6 	bl	80002b0 <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4b60      	ldr	r3, [pc, #384]	@ (80030cc <UART_SetConfig+0x4e4>)
 8002f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	011c      	lsls	r4, r3, #4
 8002f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	1891      	adds	r1, r2, r2
 8002f6a:	61b9      	str	r1, [r7, #24]
 8002f6c:	415b      	adcs	r3, r3
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f74:	4641      	mov	r1, r8
 8002f76:	1851      	adds	r1, r2, r1
 8002f78:	6139      	str	r1, [r7, #16]
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	414b      	adcs	r3, r1
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f8c:	4659      	mov	r1, fp
 8002f8e:	00cb      	lsls	r3, r1, #3
 8002f90:	4651      	mov	r1, sl
 8002f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f96:	4651      	mov	r1, sl
 8002f98:	00ca      	lsls	r2, r1, #3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4642      	mov	r2, r8
 8002fa2:	189b      	adds	r3, r3, r2
 8002fa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002fa8:	464b      	mov	r3, r9
 8002faa:	460a      	mov	r2, r1
 8002fac:	eb42 0303 	adc.w	r3, r2, r3
 8002fb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002fcc:	4649      	mov	r1, r9
 8002fce:	008b      	lsls	r3, r1, #2
 8002fd0:	4641      	mov	r1, r8
 8002fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fd6:	4641      	mov	r1, r8
 8002fd8:	008a      	lsls	r2, r1, #2
 8002fda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002fde:	f7fd f967 	bl	80002b0 <__aeabi_uldivmod>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4b38      	ldr	r3, [pc, #224]	@ (80030cc <UART_SetConfig+0x4e4>)
 8002fea:	fba3 2301 	umull	r2, r3, r3, r1
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	2264      	movs	r2, #100	@ 0x64
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	1acb      	subs	r3, r1, r3
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	3332      	adds	r3, #50	@ 0x32
 8002ffc:	4a33      	ldr	r2, [pc, #204]	@ (80030cc <UART_SetConfig+0x4e4>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003008:	441c      	add	r4, r3
 800300a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800300e:	2200      	movs	r2, #0
 8003010:	673b      	str	r3, [r7, #112]	@ 0x70
 8003012:	677a      	str	r2, [r7, #116]	@ 0x74
 8003014:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003018:	4642      	mov	r2, r8
 800301a:	464b      	mov	r3, r9
 800301c:	1891      	adds	r1, r2, r2
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	415b      	adcs	r3, r3
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003028:	4641      	mov	r1, r8
 800302a:	1851      	adds	r1, r2, r1
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	4649      	mov	r1, r9
 8003030:	414b      	adcs	r3, r1
 8003032:	607b      	str	r3, [r7, #4]
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003040:	4659      	mov	r1, fp
 8003042:	00cb      	lsls	r3, r1, #3
 8003044:	4651      	mov	r1, sl
 8003046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800304a:	4651      	mov	r1, sl
 800304c:	00ca      	lsls	r2, r1, #3
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	4603      	mov	r3, r0
 8003054:	4642      	mov	r2, r8
 8003056:	189b      	adds	r3, r3, r2
 8003058:	66bb      	str	r3, [r7, #104]	@ 0x68
 800305a:	464b      	mov	r3, r9
 800305c:	460a      	mov	r2, r1
 800305e:	eb42 0303 	adc.w	r3, r2, r3
 8003062:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	663b      	str	r3, [r7, #96]	@ 0x60
 800306e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800307c:	4649      	mov	r1, r9
 800307e:	008b      	lsls	r3, r1, #2
 8003080:	4641      	mov	r1, r8
 8003082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003086:	4641      	mov	r1, r8
 8003088:	008a      	lsls	r2, r1, #2
 800308a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800308e:	f7fd f90f 	bl	80002b0 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <UART_SetConfig+0x4e4>)
 8003098:	fba3 1302 	umull	r1, r3, r3, r2
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	2164      	movs	r1, #100	@ 0x64
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	3332      	adds	r3, #50	@ 0x32
 80030aa:	4a08      	ldr	r2, [pc, #32]	@ (80030cc <UART_SetConfig+0x4e4>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	f003 020f 	and.w	r2, r3, #15
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4422      	add	r2, r4
 80030be:	609a      	str	r2, [r3, #8]
}
 80030c0:	bf00      	nop
 80030c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80030c6:	46bd      	mov	sp, r7
 80030c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030cc:	51eb851f 	.word	0x51eb851f

080030d0 <std>:
 80030d0:	2300      	movs	r3, #0
 80030d2:	b510      	push	{r4, lr}
 80030d4:	4604      	mov	r4, r0
 80030d6:	e9c0 3300 	strd	r3, r3, [r0]
 80030da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030de:	6083      	str	r3, [r0, #8]
 80030e0:	8181      	strh	r1, [r0, #12]
 80030e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80030e4:	81c2      	strh	r2, [r0, #14]
 80030e6:	6183      	str	r3, [r0, #24]
 80030e8:	4619      	mov	r1, r3
 80030ea:	2208      	movs	r2, #8
 80030ec:	305c      	adds	r0, #92	@ 0x5c
 80030ee:	f000 fa19 	bl	8003524 <memset>
 80030f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <std+0x58>)
 80030f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80030f6:	4b0d      	ldr	r3, [pc, #52]	@ (800312c <std+0x5c>)
 80030f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <std+0x60>)
 80030fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <std+0x64>)
 8003100:	6323      	str	r3, [r4, #48]	@ 0x30
 8003102:	4b0d      	ldr	r3, [pc, #52]	@ (8003138 <std+0x68>)
 8003104:	6224      	str	r4, [r4, #32]
 8003106:	429c      	cmp	r4, r3
 8003108:	d006      	beq.n	8003118 <std+0x48>
 800310a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800310e:	4294      	cmp	r4, r2
 8003110:	d002      	beq.n	8003118 <std+0x48>
 8003112:	33d0      	adds	r3, #208	@ 0xd0
 8003114:	429c      	cmp	r4, r3
 8003116:	d105      	bne.n	8003124 <std+0x54>
 8003118:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800311c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003120:	f000 bad4 	b.w	80036cc <__retarget_lock_init_recursive>
 8003124:	bd10      	pop	{r4, pc}
 8003126:	bf00      	nop
 8003128:	08003375 	.word	0x08003375
 800312c:	08003397 	.word	0x08003397
 8003130:	080033cf 	.word	0x080033cf
 8003134:	080033f3 	.word	0x080033f3
 8003138:	20000190 	.word	0x20000190

0800313c <stdio_exit_handler>:
 800313c:	4a02      	ldr	r2, [pc, #8]	@ (8003148 <stdio_exit_handler+0xc>)
 800313e:	4903      	ldr	r1, [pc, #12]	@ (800314c <stdio_exit_handler+0x10>)
 8003140:	4803      	ldr	r0, [pc, #12]	@ (8003150 <stdio_exit_handler+0x14>)
 8003142:	f000 b869 	b.w	8003218 <_fwalk_sglue>
 8003146:	bf00      	nop
 8003148:	2000000c 	.word	0x2000000c
 800314c:	08004279 	.word	0x08004279
 8003150:	2000001c 	.word	0x2000001c

08003154 <cleanup_stdio>:
 8003154:	6841      	ldr	r1, [r0, #4]
 8003156:	4b0c      	ldr	r3, [pc, #48]	@ (8003188 <cleanup_stdio+0x34>)
 8003158:	4299      	cmp	r1, r3
 800315a:	b510      	push	{r4, lr}
 800315c:	4604      	mov	r4, r0
 800315e:	d001      	beq.n	8003164 <cleanup_stdio+0x10>
 8003160:	f001 f88a 	bl	8004278 <_fflush_r>
 8003164:	68a1      	ldr	r1, [r4, #8]
 8003166:	4b09      	ldr	r3, [pc, #36]	@ (800318c <cleanup_stdio+0x38>)
 8003168:	4299      	cmp	r1, r3
 800316a:	d002      	beq.n	8003172 <cleanup_stdio+0x1e>
 800316c:	4620      	mov	r0, r4
 800316e:	f001 f883 	bl	8004278 <_fflush_r>
 8003172:	68e1      	ldr	r1, [r4, #12]
 8003174:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <cleanup_stdio+0x3c>)
 8003176:	4299      	cmp	r1, r3
 8003178:	d004      	beq.n	8003184 <cleanup_stdio+0x30>
 800317a:	4620      	mov	r0, r4
 800317c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003180:	f001 b87a 	b.w	8004278 <_fflush_r>
 8003184:	bd10      	pop	{r4, pc}
 8003186:	bf00      	nop
 8003188:	20000190 	.word	0x20000190
 800318c:	200001f8 	.word	0x200001f8
 8003190:	20000260 	.word	0x20000260

08003194 <global_stdio_init.part.0>:
 8003194:	b510      	push	{r4, lr}
 8003196:	4b0b      	ldr	r3, [pc, #44]	@ (80031c4 <global_stdio_init.part.0+0x30>)
 8003198:	4c0b      	ldr	r4, [pc, #44]	@ (80031c8 <global_stdio_init.part.0+0x34>)
 800319a:	4a0c      	ldr	r2, [pc, #48]	@ (80031cc <global_stdio_init.part.0+0x38>)
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	4620      	mov	r0, r4
 80031a0:	2200      	movs	r2, #0
 80031a2:	2104      	movs	r1, #4
 80031a4:	f7ff ff94 	bl	80030d0 <std>
 80031a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80031ac:	2201      	movs	r2, #1
 80031ae:	2109      	movs	r1, #9
 80031b0:	f7ff ff8e 	bl	80030d0 <std>
 80031b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80031b8:	2202      	movs	r2, #2
 80031ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031be:	2112      	movs	r1, #18
 80031c0:	f7ff bf86 	b.w	80030d0 <std>
 80031c4:	200002c8 	.word	0x200002c8
 80031c8:	20000190 	.word	0x20000190
 80031cc:	0800313d 	.word	0x0800313d

080031d0 <__sfp_lock_acquire>:
 80031d0:	4801      	ldr	r0, [pc, #4]	@ (80031d8 <__sfp_lock_acquire+0x8>)
 80031d2:	f000 ba7c 	b.w	80036ce <__retarget_lock_acquire_recursive>
 80031d6:	bf00      	nop
 80031d8:	200002d1 	.word	0x200002d1

080031dc <__sfp_lock_release>:
 80031dc:	4801      	ldr	r0, [pc, #4]	@ (80031e4 <__sfp_lock_release+0x8>)
 80031de:	f000 ba77 	b.w	80036d0 <__retarget_lock_release_recursive>
 80031e2:	bf00      	nop
 80031e4:	200002d1 	.word	0x200002d1

080031e8 <__sinit>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	4604      	mov	r4, r0
 80031ec:	f7ff fff0 	bl	80031d0 <__sfp_lock_acquire>
 80031f0:	6a23      	ldr	r3, [r4, #32]
 80031f2:	b11b      	cbz	r3, 80031fc <__sinit+0x14>
 80031f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031f8:	f7ff bff0 	b.w	80031dc <__sfp_lock_release>
 80031fc:	4b04      	ldr	r3, [pc, #16]	@ (8003210 <__sinit+0x28>)
 80031fe:	6223      	str	r3, [r4, #32]
 8003200:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <__sinit+0x2c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f5      	bne.n	80031f4 <__sinit+0xc>
 8003208:	f7ff ffc4 	bl	8003194 <global_stdio_init.part.0>
 800320c:	e7f2      	b.n	80031f4 <__sinit+0xc>
 800320e:	bf00      	nop
 8003210:	08003155 	.word	0x08003155
 8003214:	200002c8 	.word	0x200002c8

08003218 <_fwalk_sglue>:
 8003218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800321c:	4607      	mov	r7, r0
 800321e:	4688      	mov	r8, r1
 8003220:	4614      	mov	r4, r2
 8003222:	2600      	movs	r6, #0
 8003224:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003228:	f1b9 0901 	subs.w	r9, r9, #1
 800322c:	d505      	bpl.n	800323a <_fwalk_sglue+0x22>
 800322e:	6824      	ldr	r4, [r4, #0]
 8003230:	2c00      	cmp	r4, #0
 8003232:	d1f7      	bne.n	8003224 <_fwalk_sglue+0xc>
 8003234:	4630      	mov	r0, r6
 8003236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800323a:	89ab      	ldrh	r3, [r5, #12]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d907      	bls.n	8003250 <_fwalk_sglue+0x38>
 8003240:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003244:	3301      	adds	r3, #1
 8003246:	d003      	beq.n	8003250 <_fwalk_sglue+0x38>
 8003248:	4629      	mov	r1, r5
 800324a:	4638      	mov	r0, r7
 800324c:	47c0      	blx	r8
 800324e:	4306      	orrs	r6, r0
 8003250:	3568      	adds	r5, #104	@ 0x68
 8003252:	e7e9      	b.n	8003228 <_fwalk_sglue+0x10>

08003254 <iprintf>:
 8003254:	b40f      	push	{r0, r1, r2, r3}
 8003256:	b507      	push	{r0, r1, r2, lr}
 8003258:	4906      	ldr	r1, [pc, #24]	@ (8003274 <iprintf+0x20>)
 800325a:	ab04      	add	r3, sp, #16
 800325c:	6808      	ldr	r0, [r1, #0]
 800325e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003262:	6881      	ldr	r1, [r0, #8]
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	f000 fcdd 	bl	8003c24 <_vfiprintf_r>
 800326a:	b003      	add	sp, #12
 800326c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003270:	b004      	add	sp, #16
 8003272:	4770      	bx	lr
 8003274:	20000018 	.word	0x20000018

08003278 <_puts_r>:
 8003278:	6a03      	ldr	r3, [r0, #32]
 800327a:	b570      	push	{r4, r5, r6, lr}
 800327c:	6884      	ldr	r4, [r0, #8]
 800327e:	4605      	mov	r5, r0
 8003280:	460e      	mov	r6, r1
 8003282:	b90b      	cbnz	r3, 8003288 <_puts_r+0x10>
 8003284:	f7ff ffb0 	bl	80031e8 <__sinit>
 8003288:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800328a:	07db      	lsls	r3, r3, #31
 800328c:	d405      	bmi.n	800329a <_puts_r+0x22>
 800328e:	89a3      	ldrh	r3, [r4, #12]
 8003290:	0598      	lsls	r0, r3, #22
 8003292:	d402      	bmi.n	800329a <_puts_r+0x22>
 8003294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003296:	f000 fa1a 	bl	80036ce <__retarget_lock_acquire_recursive>
 800329a:	89a3      	ldrh	r3, [r4, #12]
 800329c:	0719      	lsls	r1, r3, #28
 800329e:	d502      	bpl.n	80032a6 <_puts_r+0x2e>
 80032a0:	6923      	ldr	r3, [r4, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d135      	bne.n	8003312 <_puts_r+0x9a>
 80032a6:	4621      	mov	r1, r4
 80032a8:	4628      	mov	r0, r5
 80032aa:	f000 f8e5 	bl	8003478 <__swsetup_r>
 80032ae:	b380      	cbz	r0, 8003312 <_puts_r+0x9a>
 80032b0:	f04f 35ff 	mov.w	r5, #4294967295
 80032b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032b6:	07da      	lsls	r2, r3, #31
 80032b8:	d405      	bmi.n	80032c6 <_puts_r+0x4e>
 80032ba:	89a3      	ldrh	r3, [r4, #12]
 80032bc:	059b      	lsls	r3, r3, #22
 80032be:	d402      	bmi.n	80032c6 <_puts_r+0x4e>
 80032c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032c2:	f000 fa05 	bl	80036d0 <__retarget_lock_release_recursive>
 80032c6:	4628      	mov	r0, r5
 80032c8:	bd70      	pop	{r4, r5, r6, pc}
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	da04      	bge.n	80032d8 <_puts_r+0x60>
 80032ce:	69a2      	ldr	r2, [r4, #24]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	dc17      	bgt.n	8003304 <_puts_r+0x8c>
 80032d4:	290a      	cmp	r1, #10
 80032d6:	d015      	beq.n	8003304 <_puts_r+0x8c>
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	6022      	str	r2, [r4, #0]
 80032de:	7019      	strb	r1, [r3, #0]
 80032e0:	68a3      	ldr	r3, [r4, #8]
 80032e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032e6:	3b01      	subs	r3, #1
 80032e8:	60a3      	str	r3, [r4, #8]
 80032ea:	2900      	cmp	r1, #0
 80032ec:	d1ed      	bne.n	80032ca <_puts_r+0x52>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	da11      	bge.n	8003316 <_puts_r+0x9e>
 80032f2:	4622      	mov	r2, r4
 80032f4:	210a      	movs	r1, #10
 80032f6:	4628      	mov	r0, r5
 80032f8:	f000 f87f 	bl	80033fa <__swbuf_r>
 80032fc:	3001      	adds	r0, #1
 80032fe:	d0d7      	beq.n	80032b0 <_puts_r+0x38>
 8003300:	250a      	movs	r5, #10
 8003302:	e7d7      	b.n	80032b4 <_puts_r+0x3c>
 8003304:	4622      	mov	r2, r4
 8003306:	4628      	mov	r0, r5
 8003308:	f000 f877 	bl	80033fa <__swbuf_r>
 800330c:	3001      	adds	r0, #1
 800330e:	d1e7      	bne.n	80032e0 <_puts_r+0x68>
 8003310:	e7ce      	b.n	80032b0 <_puts_r+0x38>
 8003312:	3e01      	subs	r6, #1
 8003314:	e7e4      	b.n	80032e0 <_puts_r+0x68>
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	6022      	str	r2, [r4, #0]
 800331c:	220a      	movs	r2, #10
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e7ee      	b.n	8003300 <_puts_r+0x88>
	...

08003324 <puts>:
 8003324:	4b02      	ldr	r3, [pc, #8]	@ (8003330 <puts+0xc>)
 8003326:	4601      	mov	r1, r0
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	f7ff bfa5 	b.w	8003278 <_puts_r>
 800332e:	bf00      	nop
 8003330:	20000018 	.word	0x20000018

08003334 <siprintf>:
 8003334:	b40e      	push	{r1, r2, r3}
 8003336:	b500      	push	{lr}
 8003338:	b09c      	sub	sp, #112	@ 0x70
 800333a:	ab1d      	add	r3, sp, #116	@ 0x74
 800333c:	9002      	str	r0, [sp, #8]
 800333e:	9006      	str	r0, [sp, #24]
 8003340:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003344:	4809      	ldr	r0, [pc, #36]	@ (800336c <siprintf+0x38>)
 8003346:	9107      	str	r1, [sp, #28]
 8003348:	9104      	str	r1, [sp, #16]
 800334a:	4909      	ldr	r1, [pc, #36]	@ (8003370 <siprintf+0x3c>)
 800334c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003350:	9105      	str	r1, [sp, #20]
 8003352:	6800      	ldr	r0, [r0, #0]
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	a902      	add	r1, sp, #8
 8003358:	f000 fb3e 	bl	80039d8 <_svfiprintf_r>
 800335c:	9b02      	ldr	r3, [sp, #8]
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	b01c      	add	sp, #112	@ 0x70
 8003364:	f85d eb04 	ldr.w	lr, [sp], #4
 8003368:	b003      	add	sp, #12
 800336a:	4770      	bx	lr
 800336c:	20000018 	.word	0x20000018
 8003370:	ffff0208 	.word	0xffff0208

08003374 <__sread>:
 8003374:	b510      	push	{r4, lr}
 8003376:	460c      	mov	r4, r1
 8003378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800337c:	f000 f958 	bl	8003630 <_read_r>
 8003380:	2800      	cmp	r0, #0
 8003382:	bfab      	itete	ge
 8003384:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003386:	89a3      	ldrhlt	r3, [r4, #12]
 8003388:	181b      	addge	r3, r3, r0
 800338a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800338e:	bfac      	ite	ge
 8003390:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003392:	81a3      	strhlt	r3, [r4, #12]
 8003394:	bd10      	pop	{r4, pc}

08003396 <__swrite>:
 8003396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800339a:	461f      	mov	r7, r3
 800339c:	898b      	ldrh	r3, [r1, #12]
 800339e:	05db      	lsls	r3, r3, #23
 80033a0:	4605      	mov	r5, r0
 80033a2:	460c      	mov	r4, r1
 80033a4:	4616      	mov	r6, r2
 80033a6:	d505      	bpl.n	80033b4 <__swrite+0x1e>
 80033a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ac:	2302      	movs	r3, #2
 80033ae:	2200      	movs	r2, #0
 80033b0:	f000 f92c 	bl	800360c <_lseek_r>
 80033b4:	89a3      	ldrh	r3, [r4, #12]
 80033b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033be:	81a3      	strh	r3, [r4, #12]
 80033c0:	4632      	mov	r2, r6
 80033c2:	463b      	mov	r3, r7
 80033c4:	4628      	mov	r0, r5
 80033c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033ca:	f000 b943 	b.w	8003654 <_write_r>

080033ce <__sseek>:
 80033ce:	b510      	push	{r4, lr}
 80033d0:	460c      	mov	r4, r1
 80033d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033d6:	f000 f919 	bl	800360c <_lseek_r>
 80033da:	1c43      	adds	r3, r0, #1
 80033dc:	89a3      	ldrh	r3, [r4, #12]
 80033de:	bf15      	itete	ne
 80033e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80033e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80033e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80033ea:	81a3      	strheq	r3, [r4, #12]
 80033ec:	bf18      	it	ne
 80033ee:	81a3      	strhne	r3, [r4, #12]
 80033f0:	bd10      	pop	{r4, pc}

080033f2 <__sclose>:
 80033f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033f6:	f000 b8f9 	b.w	80035ec <_close_r>

080033fa <__swbuf_r>:
 80033fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fc:	460e      	mov	r6, r1
 80033fe:	4614      	mov	r4, r2
 8003400:	4605      	mov	r5, r0
 8003402:	b118      	cbz	r0, 800340c <__swbuf_r+0x12>
 8003404:	6a03      	ldr	r3, [r0, #32]
 8003406:	b90b      	cbnz	r3, 800340c <__swbuf_r+0x12>
 8003408:	f7ff feee 	bl	80031e8 <__sinit>
 800340c:	69a3      	ldr	r3, [r4, #24]
 800340e:	60a3      	str	r3, [r4, #8]
 8003410:	89a3      	ldrh	r3, [r4, #12]
 8003412:	071a      	lsls	r2, r3, #28
 8003414:	d501      	bpl.n	800341a <__swbuf_r+0x20>
 8003416:	6923      	ldr	r3, [r4, #16]
 8003418:	b943      	cbnz	r3, 800342c <__swbuf_r+0x32>
 800341a:	4621      	mov	r1, r4
 800341c:	4628      	mov	r0, r5
 800341e:	f000 f82b 	bl	8003478 <__swsetup_r>
 8003422:	b118      	cbz	r0, 800342c <__swbuf_r+0x32>
 8003424:	f04f 37ff 	mov.w	r7, #4294967295
 8003428:	4638      	mov	r0, r7
 800342a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	6922      	ldr	r2, [r4, #16]
 8003430:	1a98      	subs	r0, r3, r2
 8003432:	6963      	ldr	r3, [r4, #20]
 8003434:	b2f6      	uxtb	r6, r6
 8003436:	4283      	cmp	r3, r0
 8003438:	4637      	mov	r7, r6
 800343a:	dc05      	bgt.n	8003448 <__swbuf_r+0x4e>
 800343c:	4621      	mov	r1, r4
 800343e:	4628      	mov	r0, r5
 8003440:	f000 ff1a 	bl	8004278 <_fflush_r>
 8003444:	2800      	cmp	r0, #0
 8003446:	d1ed      	bne.n	8003424 <__swbuf_r+0x2a>
 8003448:	68a3      	ldr	r3, [r4, #8]
 800344a:	3b01      	subs	r3, #1
 800344c:	60a3      	str	r3, [r4, #8]
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	6022      	str	r2, [r4, #0]
 8003454:	701e      	strb	r6, [r3, #0]
 8003456:	6962      	ldr	r2, [r4, #20]
 8003458:	1c43      	adds	r3, r0, #1
 800345a:	429a      	cmp	r2, r3
 800345c:	d004      	beq.n	8003468 <__swbuf_r+0x6e>
 800345e:	89a3      	ldrh	r3, [r4, #12]
 8003460:	07db      	lsls	r3, r3, #31
 8003462:	d5e1      	bpl.n	8003428 <__swbuf_r+0x2e>
 8003464:	2e0a      	cmp	r6, #10
 8003466:	d1df      	bne.n	8003428 <__swbuf_r+0x2e>
 8003468:	4621      	mov	r1, r4
 800346a:	4628      	mov	r0, r5
 800346c:	f000 ff04 	bl	8004278 <_fflush_r>
 8003470:	2800      	cmp	r0, #0
 8003472:	d0d9      	beq.n	8003428 <__swbuf_r+0x2e>
 8003474:	e7d6      	b.n	8003424 <__swbuf_r+0x2a>
	...

08003478 <__swsetup_r>:
 8003478:	b538      	push	{r3, r4, r5, lr}
 800347a:	4b29      	ldr	r3, [pc, #164]	@ (8003520 <__swsetup_r+0xa8>)
 800347c:	4605      	mov	r5, r0
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	460c      	mov	r4, r1
 8003482:	b118      	cbz	r0, 800348c <__swsetup_r+0x14>
 8003484:	6a03      	ldr	r3, [r0, #32]
 8003486:	b90b      	cbnz	r3, 800348c <__swsetup_r+0x14>
 8003488:	f7ff feae 	bl	80031e8 <__sinit>
 800348c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003490:	0719      	lsls	r1, r3, #28
 8003492:	d422      	bmi.n	80034da <__swsetup_r+0x62>
 8003494:	06da      	lsls	r2, r3, #27
 8003496:	d407      	bmi.n	80034a8 <__swsetup_r+0x30>
 8003498:	2209      	movs	r2, #9
 800349a:	602a      	str	r2, [r5, #0]
 800349c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034a0:	81a3      	strh	r3, [r4, #12]
 80034a2:	f04f 30ff 	mov.w	r0, #4294967295
 80034a6:	e033      	b.n	8003510 <__swsetup_r+0x98>
 80034a8:	0758      	lsls	r0, r3, #29
 80034aa:	d512      	bpl.n	80034d2 <__swsetup_r+0x5a>
 80034ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034ae:	b141      	cbz	r1, 80034c2 <__swsetup_r+0x4a>
 80034b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80034b4:	4299      	cmp	r1, r3
 80034b6:	d002      	beq.n	80034be <__swsetup_r+0x46>
 80034b8:	4628      	mov	r0, r5
 80034ba:	f000 f931 	bl	8003720 <_free_r>
 80034be:	2300      	movs	r3, #0
 80034c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80034c2:	89a3      	ldrh	r3, [r4, #12]
 80034c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80034c8:	81a3      	strh	r3, [r4, #12]
 80034ca:	2300      	movs	r3, #0
 80034cc:	6063      	str	r3, [r4, #4]
 80034ce:	6923      	ldr	r3, [r4, #16]
 80034d0:	6023      	str	r3, [r4, #0]
 80034d2:	89a3      	ldrh	r3, [r4, #12]
 80034d4:	f043 0308 	orr.w	r3, r3, #8
 80034d8:	81a3      	strh	r3, [r4, #12]
 80034da:	6923      	ldr	r3, [r4, #16]
 80034dc:	b94b      	cbnz	r3, 80034f2 <__swsetup_r+0x7a>
 80034de:	89a3      	ldrh	r3, [r4, #12]
 80034e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80034e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034e8:	d003      	beq.n	80034f2 <__swsetup_r+0x7a>
 80034ea:	4621      	mov	r1, r4
 80034ec:	4628      	mov	r0, r5
 80034ee:	f000 ff23 	bl	8004338 <__smakebuf_r>
 80034f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034f6:	f013 0201 	ands.w	r2, r3, #1
 80034fa:	d00a      	beq.n	8003512 <__swsetup_r+0x9a>
 80034fc:	2200      	movs	r2, #0
 80034fe:	60a2      	str	r2, [r4, #8]
 8003500:	6962      	ldr	r2, [r4, #20]
 8003502:	4252      	negs	r2, r2
 8003504:	61a2      	str	r2, [r4, #24]
 8003506:	6922      	ldr	r2, [r4, #16]
 8003508:	b942      	cbnz	r2, 800351c <__swsetup_r+0xa4>
 800350a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800350e:	d1c5      	bne.n	800349c <__swsetup_r+0x24>
 8003510:	bd38      	pop	{r3, r4, r5, pc}
 8003512:	0799      	lsls	r1, r3, #30
 8003514:	bf58      	it	pl
 8003516:	6962      	ldrpl	r2, [r4, #20]
 8003518:	60a2      	str	r2, [r4, #8]
 800351a:	e7f4      	b.n	8003506 <__swsetup_r+0x8e>
 800351c:	2000      	movs	r0, #0
 800351e:	e7f7      	b.n	8003510 <__swsetup_r+0x98>
 8003520:	20000018 	.word	0x20000018

08003524 <memset>:
 8003524:	4402      	add	r2, r0
 8003526:	4603      	mov	r3, r0
 8003528:	4293      	cmp	r3, r2
 800352a:	d100      	bne.n	800352e <memset+0xa>
 800352c:	4770      	bx	lr
 800352e:	f803 1b01 	strb.w	r1, [r3], #1
 8003532:	e7f9      	b.n	8003528 <memset+0x4>

08003534 <strtok>:
 8003534:	4b16      	ldr	r3, [pc, #88]	@ (8003590 <strtok+0x5c>)
 8003536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800353a:	681f      	ldr	r7, [r3, #0]
 800353c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800353e:	4605      	mov	r5, r0
 8003540:	460e      	mov	r6, r1
 8003542:	b9ec      	cbnz	r4, 8003580 <strtok+0x4c>
 8003544:	2050      	movs	r0, #80	@ 0x50
 8003546:	f000 f935 	bl	80037b4 <malloc>
 800354a:	4602      	mov	r2, r0
 800354c:	6478      	str	r0, [r7, #68]	@ 0x44
 800354e:	b920      	cbnz	r0, 800355a <strtok+0x26>
 8003550:	4b10      	ldr	r3, [pc, #64]	@ (8003594 <strtok+0x60>)
 8003552:	4811      	ldr	r0, [pc, #68]	@ (8003598 <strtok+0x64>)
 8003554:	215b      	movs	r1, #91	@ 0x5b
 8003556:	f000 f8c5 	bl	80036e4 <__assert_func>
 800355a:	e9c0 4400 	strd	r4, r4, [r0]
 800355e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003562:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003566:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800356a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800356e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8003572:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8003576:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800357a:	6184      	str	r4, [r0, #24]
 800357c:	7704      	strb	r4, [r0, #28]
 800357e:	6244      	str	r4, [r0, #36]	@ 0x24
 8003580:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003582:	4631      	mov	r1, r6
 8003584:	4628      	mov	r0, r5
 8003586:	2301      	movs	r3, #1
 8003588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800358c:	f000 b806 	b.w	800359c <__strtok_r>
 8003590:	20000018 	.word	0x20000018
 8003594:	08004600 	.word	0x08004600
 8003598:	08004617 	.word	0x08004617

0800359c <__strtok_r>:
 800359c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359e:	4604      	mov	r4, r0
 80035a0:	b908      	cbnz	r0, 80035a6 <__strtok_r+0xa>
 80035a2:	6814      	ldr	r4, [r2, #0]
 80035a4:	b144      	cbz	r4, 80035b8 <__strtok_r+0x1c>
 80035a6:	4620      	mov	r0, r4
 80035a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80035ac:	460f      	mov	r7, r1
 80035ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 80035b2:	b91e      	cbnz	r6, 80035bc <__strtok_r+0x20>
 80035b4:	b965      	cbnz	r5, 80035d0 <__strtok_r+0x34>
 80035b6:	6015      	str	r5, [r2, #0]
 80035b8:	2000      	movs	r0, #0
 80035ba:	e005      	b.n	80035c8 <__strtok_r+0x2c>
 80035bc:	42b5      	cmp	r5, r6
 80035be:	d1f6      	bne.n	80035ae <__strtok_r+0x12>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f0      	bne.n	80035a6 <__strtok_r+0xa>
 80035c4:	6014      	str	r4, [r2, #0]
 80035c6:	7003      	strb	r3, [r0, #0]
 80035c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ca:	461c      	mov	r4, r3
 80035cc:	e00c      	b.n	80035e8 <__strtok_r+0x4c>
 80035ce:	b915      	cbnz	r5, 80035d6 <__strtok_r+0x3a>
 80035d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80035d4:	460e      	mov	r6, r1
 80035d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80035da:	42ab      	cmp	r3, r5
 80035dc:	d1f7      	bne.n	80035ce <__strtok_r+0x32>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f3      	beq.n	80035ca <__strtok_r+0x2e>
 80035e2:	2300      	movs	r3, #0
 80035e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80035e8:	6014      	str	r4, [r2, #0]
 80035ea:	e7ed      	b.n	80035c8 <__strtok_r+0x2c>

080035ec <_close_r>:
 80035ec:	b538      	push	{r3, r4, r5, lr}
 80035ee:	4d06      	ldr	r5, [pc, #24]	@ (8003608 <_close_r+0x1c>)
 80035f0:	2300      	movs	r3, #0
 80035f2:	4604      	mov	r4, r0
 80035f4:	4608      	mov	r0, r1
 80035f6:	602b      	str	r3, [r5, #0]
 80035f8:	f7fd fc22 	bl	8000e40 <_close>
 80035fc:	1c43      	adds	r3, r0, #1
 80035fe:	d102      	bne.n	8003606 <_close_r+0x1a>
 8003600:	682b      	ldr	r3, [r5, #0]
 8003602:	b103      	cbz	r3, 8003606 <_close_r+0x1a>
 8003604:	6023      	str	r3, [r4, #0]
 8003606:	bd38      	pop	{r3, r4, r5, pc}
 8003608:	200002cc 	.word	0x200002cc

0800360c <_lseek_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	4d07      	ldr	r5, [pc, #28]	@ (800362c <_lseek_r+0x20>)
 8003610:	4604      	mov	r4, r0
 8003612:	4608      	mov	r0, r1
 8003614:	4611      	mov	r1, r2
 8003616:	2200      	movs	r2, #0
 8003618:	602a      	str	r2, [r5, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	f7fd fc37 	bl	8000e8e <_lseek>
 8003620:	1c43      	adds	r3, r0, #1
 8003622:	d102      	bne.n	800362a <_lseek_r+0x1e>
 8003624:	682b      	ldr	r3, [r5, #0]
 8003626:	b103      	cbz	r3, 800362a <_lseek_r+0x1e>
 8003628:	6023      	str	r3, [r4, #0]
 800362a:	bd38      	pop	{r3, r4, r5, pc}
 800362c:	200002cc 	.word	0x200002cc

08003630 <_read_r>:
 8003630:	b538      	push	{r3, r4, r5, lr}
 8003632:	4d07      	ldr	r5, [pc, #28]	@ (8003650 <_read_r+0x20>)
 8003634:	4604      	mov	r4, r0
 8003636:	4608      	mov	r0, r1
 8003638:	4611      	mov	r1, r2
 800363a:	2200      	movs	r2, #0
 800363c:	602a      	str	r2, [r5, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	f7fd fbc5 	bl	8000dce <_read>
 8003644:	1c43      	adds	r3, r0, #1
 8003646:	d102      	bne.n	800364e <_read_r+0x1e>
 8003648:	682b      	ldr	r3, [r5, #0]
 800364a:	b103      	cbz	r3, 800364e <_read_r+0x1e>
 800364c:	6023      	str	r3, [r4, #0]
 800364e:	bd38      	pop	{r3, r4, r5, pc}
 8003650:	200002cc 	.word	0x200002cc

08003654 <_write_r>:
 8003654:	b538      	push	{r3, r4, r5, lr}
 8003656:	4d07      	ldr	r5, [pc, #28]	@ (8003674 <_write_r+0x20>)
 8003658:	4604      	mov	r4, r0
 800365a:	4608      	mov	r0, r1
 800365c:	4611      	mov	r1, r2
 800365e:	2200      	movs	r2, #0
 8003660:	602a      	str	r2, [r5, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	f7fd fbd0 	bl	8000e08 <_write>
 8003668:	1c43      	adds	r3, r0, #1
 800366a:	d102      	bne.n	8003672 <_write_r+0x1e>
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	b103      	cbz	r3, 8003672 <_write_r+0x1e>
 8003670:	6023      	str	r3, [r4, #0]
 8003672:	bd38      	pop	{r3, r4, r5, pc}
 8003674:	200002cc 	.word	0x200002cc

08003678 <__errno>:
 8003678:	4b01      	ldr	r3, [pc, #4]	@ (8003680 <__errno+0x8>)
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000018 	.word	0x20000018

08003684 <__libc_init_array>:
 8003684:	b570      	push	{r4, r5, r6, lr}
 8003686:	4d0d      	ldr	r5, [pc, #52]	@ (80036bc <__libc_init_array+0x38>)
 8003688:	4c0d      	ldr	r4, [pc, #52]	@ (80036c0 <__libc_init_array+0x3c>)
 800368a:	1b64      	subs	r4, r4, r5
 800368c:	10a4      	asrs	r4, r4, #2
 800368e:	2600      	movs	r6, #0
 8003690:	42a6      	cmp	r6, r4
 8003692:	d109      	bne.n	80036a8 <__libc_init_array+0x24>
 8003694:	4d0b      	ldr	r5, [pc, #44]	@ (80036c4 <__libc_init_array+0x40>)
 8003696:	4c0c      	ldr	r4, [pc, #48]	@ (80036c8 <__libc_init_array+0x44>)
 8003698:	f000 ff66 	bl	8004568 <_init>
 800369c:	1b64      	subs	r4, r4, r5
 800369e:	10a4      	asrs	r4, r4, #2
 80036a0:	2600      	movs	r6, #0
 80036a2:	42a6      	cmp	r6, r4
 80036a4:	d105      	bne.n	80036b2 <__libc_init_array+0x2e>
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ac:	4798      	blx	r3
 80036ae:	3601      	adds	r6, #1
 80036b0:	e7ee      	b.n	8003690 <__libc_init_array+0xc>
 80036b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b6:	4798      	blx	r3
 80036b8:	3601      	adds	r6, #1
 80036ba:	e7f2      	b.n	80036a2 <__libc_init_array+0x1e>
 80036bc:	080046e8 	.word	0x080046e8
 80036c0:	080046e8 	.word	0x080046e8
 80036c4:	080046e8 	.word	0x080046e8
 80036c8:	080046ec 	.word	0x080046ec

080036cc <__retarget_lock_init_recursive>:
 80036cc:	4770      	bx	lr

080036ce <__retarget_lock_acquire_recursive>:
 80036ce:	4770      	bx	lr

080036d0 <__retarget_lock_release_recursive>:
 80036d0:	4770      	bx	lr

080036d2 <strcpy>:
 80036d2:	4603      	mov	r3, r0
 80036d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036d8:	f803 2b01 	strb.w	r2, [r3], #1
 80036dc:	2a00      	cmp	r2, #0
 80036de:	d1f9      	bne.n	80036d4 <strcpy+0x2>
 80036e0:	4770      	bx	lr
	...

080036e4 <__assert_func>:
 80036e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80036e6:	4614      	mov	r4, r2
 80036e8:	461a      	mov	r2, r3
 80036ea:	4b09      	ldr	r3, [pc, #36]	@ (8003710 <__assert_func+0x2c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4605      	mov	r5, r0
 80036f0:	68d8      	ldr	r0, [r3, #12]
 80036f2:	b954      	cbnz	r4, 800370a <__assert_func+0x26>
 80036f4:	4b07      	ldr	r3, [pc, #28]	@ (8003714 <__assert_func+0x30>)
 80036f6:	461c      	mov	r4, r3
 80036f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80036fc:	9100      	str	r1, [sp, #0]
 80036fe:	462b      	mov	r3, r5
 8003700:	4905      	ldr	r1, [pc, #20]	@ (8003718 <__assert_func+0x34>)
 8003702:	f000 fde1 	bl	80042c8 <fiprintf>
 8003706:	f000 fead 	bl	8004464 <abort>
 800370a:	4b04      	ldr	r3, [pc, #16]	@ (800371c <__assert_func+0x38>)
 800370c:	e7f4      	b.n	80036f8 <__assert_func+0x14>
 800370e:	bf00      	nop
 8003710:	20000018 	.word	0x20000018
 8003714:	080046ac 	.word	0x080046ac
 8003718:	0800467e 	.word	0x0800467e
 800371c:	08004671 	.word	0x08004671

08003720 <_free_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	4605      	mov	r5, r0
 8003724:	2900      	cmp	r1, #0
 8003726:	d041      	beq.n	80037ac <_free_r+0x8c>
 8003728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800372c:	1f0c      	subs	r4, r1, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	bfb8      	it	lt
 8003732:	18e4      	addlt	r4, r4, r3
 8003734:	f000 f8e8 	bl	8003908 <__malloc_lock>
 8003738:	4a1d      	ldr	r2, [pc, #116]	@ (80037b0 <_free_r+0x90>)
 800373a:	6813      	ldr	r3, [r2, #0]
 800373c:	b933      	cbnz	r3, 800374c <_free_r+0x2c>
 800373e:	6063      	str	r3, [r4, #4]
 8003740:	6014      	str	r4, [r2, #0]
 8003742:	4628      	mov	r0, r5
 8003744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003748:	f000 b8e4 	b.w	8003914 <__malloc_unlock>
 800374c:	42a3      	cmp	r3, r4
 800374e:	d908      	bls.n	8003762 <_free_r+0x42>
 8003750:	6820      	ldr	r0, [r4, #0]
 8003752:	1821      	adds	r1, r4, r0
 8003754:	428b      	cmp	r3, r1
 8003756:	bf01      	itttt	eq
 8003758:	6819      	ldreq	r1, [r3, #0]
 800375a:	685b      	ldreq	r3, [r3, #4]
 800375c:	1809      	addeq	r1, r1, r0
 800375e:	6021      	streq	r1, [r4, #0]
 8003760:	e7ed      	b.n	800373e <_free_r+0x1e>
 8003762:	461a      	mov	r2, r3
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	b10b      	cbz	r3, 800376c <_free_r+0x4c>
 8003768:	42a3      	cmp	r3, r4
 800376a:	d9fa      	bls.n	8003762 <_free_r+0x42>
 800376c:	6811      	ldr	r1, [r2, #0]
 800376e:	1850      	adds	r0, r2, r1
 8003770:	42a0      	cmp	r0, r4
 8003772:	d10b      	bne.n	800378c <_free_r+0x6c>
 8003774:	6820      	ldr	r0, [r4, #0]
 8003776:	4401      	add	r1, r0
 8003778:	1850      	adds	r0, r2, r1
 800377a:	4283      	cmp	r3, r0
 800377c:	6011      	str	r1, [r2, #0]
 800377e:	d1e0      	bne.n	8003742 <_free_r+0x22>
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	6053      	str	r3, [r2, #4]
 8003786:	4408      	add	r0, r1
 8003788:	6010      	str	r0, [r2, #0]
 800378a:	e7da      	b.n	8003742 <_free_r+0x22>
 800378c:	d902      	bls.n	8003794 <_free_r+0x74>
 800378e:	230c      	movs	r3, #12
 8003790:	602b      	str	r3, [r5, #0]
 8003792:	e7d6      	b.n	8003742 <_free_r+0x22>
 8003794:	6820      	ldr	r0, [r4, #0]
 8003796:	1821      	adds	r1, r4, r0
 8003798:	428b      	cmp	r3, r1
 800379a:	bf04      	itt	eq
 800379c:	6819      	ldreq	r1, [r3, #0]
 800379e:	685b      	ldreq	r3, [r3, #4]
 80037a0:	6063      	str	r3, [r4, #4]
 80037a2:	bf04      	itt	eq
 80037a4:	1809      	addeq	r1, r1, r0
 80037a6:	6021      	streq	r1, [r4, #0]
 80037a8:	6054      	str	r4, [r2, #4]
 80037aa:	e7ca      	b.n	8003742 <_free_r+0x22>
 80037ac:	bd38      	pop	{r3, r4, r5, pc}
 80037ae:	bf00      	nop
 80037b0:	200002d8 	.word	0x200002d8

080037b4 <malloc>:
 80037b4:	4b02      	ldr	r3, [pc, #8]	@ (80037c0 <malloc+0xc>)
 80037b6:	4601      	mov	r1, r0
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	f000 b825 	b.w	8003808 <_malloc_r>
 80037be:	bf00      	nop
 80037c0:	20000018 	.word	0x20000018

080037c4 <sbrk_aligned>:
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	4e0f      	ldr	r6, [pc, #60]	@ (8003804 <sbrk_aligned+0x40>)
 80037c8:	460c      	mov	r4, r1
 80037ca:	6831      	ldr	r1, [r6, #0]
 80037cc:	4605      	mov	r5, r0
 80037ce:	b911      	cbnz	r1, 80037d6 <sbrk_aligned+0x12>
 80037d0:	f000 fe2a 	bl	8004428 <_sbrk_r>
 80037d4:	6030      	str	r0, [r6, #0]
 80037d6:	4621      	mov	r1, r4
 80037d8:	4628      	mov	r0, r5
 80037da:	f000 fe25 	bl	8004428 <_sbrk_r>
 80037de:	1c43      	adds	r3, r0, #1
 80037e0:	d103      	bne.n	80037ea <sbrk_aligned+0x26>
 80037e2:	f04f 34ff 	mov.w	r4, #4294967295
 80037e6:	4620      	mov	r0, r4
 80037e8:	bd70      	pop	{r4, r5, r6, pc}
 80037ea:	1cc4      	adds	r4, r0, #3
 80037ec:	f024 0403 	bic.w	r4, r4, #3
 80037f0:	42a0      	cmp	r0, r4
 80037f2:	d0f8      	beq.n	80037e6 <sbrk_aligned+0x22>
 80037f4:	1a21      	subs	r1, r4, r0
 80037f6:	4628      	mov	r0, r5
 80037f8:	f000 fe16 	bl	8004428 <_sbrk_r>
 80037fc:	3001      	adds	r0, #1
 80037fe:	d1f2      	bne.n	80037e6 <sbrk_aligned+0x22>
 8003800:	e7ef      	b.n	80037e2 <sbrk_aligned+0x1e>
 8003802:	bf00      	nop
 8003804:	200002d4 	.word	0x200002d4

08003808 <_malloc_r>:
 8003808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800380c:	1ccd      	adds	r5, r1, #3
 800380e:	f025 0503 	bic.w	r5, r5, #3
 8003812:	3508      	adds	r5, #8
 8003814:	2d0c      	cmp	r5, #12
 8003816:	bf38      	it	cc
 8003818:	250c      	movcc	r5, #12
 800381a:	2d00      	cmp	r5, #0
 800381c:	4606      	mov	r6, r0
 800381e:	db01      	blt.n	8003824 <_malloc_r+0x1c>
 8003820:	42a9      	cmp	r1, r5
 8003822:	d904      	bls.n	800382e <_malloc_r+0x26>
 8003824:	230c      	movs	r3, #12
 8003826:	6033      	str	r3, [r6, #0]
 8003828:	2000      	movs	r0, #0
 800382a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800382e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003904 <_malloc_r+0xfc>
 8003832:	f000 f869 	bl	8003908 <__malloc_lock>
 8003836:	f8d8 3000 	ldr.w	r3, [r8]
 800383a:	461c      	mov	r4, r3
 800383c:	bb44      	cbnz	r4, 8003890 <_malloc_r+0x88>
 800383e:	4629      	mov	r1, r5
 8003840:	4630      	mov	r0, r6
 8003842:	f7ff ffbf 	bl	80037c4 <sbrk_aligned>
 8003846:	1c43      	adds	r3, r0, #1
 8003848:	4604      	mov	r4, r0
 800384a:	d158      	bne.n	80038fe <_malloc_r+0xf6>
 800384c:	f8d8 4000 	ldr.w	r4, [r8]
 8003850:	4627      	mov	r7, r4
 8003852:	2f00      	cmp	r7, #0
 8003854:	d143      	bne.n	80038de <_malloc_r+0xd6>
 8003856:	2c00      	cmp	r4, #0
 8003858:	d04b      	beq.n	80038f2 <_malloc_r+0xea>
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	4639      	mov	r1, r7
 800385e:	4630      	mov	r0, r6
 8003860:	eb04 0903 	add.w	r9, r4, r3
 8003864:	f000 fde0 	bl	8004428 <_sbrk_r>
 8003868:	4581      	cmp	r9, r0
 800386a:	d142      	bne.n	80038f2 <_malloc_r+0xea>
 800386c:	6821      	ldr	r1, [r4, #0]
 800386e:	1a6d      	subs	r5, r5, r1
 8003870:	4629      	mov	r1, r5
 8003872:	4630      	mov	r0, r6
 8003874:	f7ff ffa6 	bl	80037c4 <sbrk_aligned>
 8003878:	3001      	adds	r0, #1
 800387a:	d03a      	beq.n	80038f2 <_malloc_r+0xea>
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	442b      	add	r3, r5
 8003880:	6023      	str	r3, [r4, #0]
 8003882:	f8d8 3000 	ldr.w	r3, [r8]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	bb62      	cbnz	r2, 80038e4 <_malloc_r+0xdc>
 800388a:	f8c8 7000 	str.w	r7, [r8]
 800388e:	e00f      	b.n	80038b0 <_malloc_r+0xa8>
 8003890:	6822      	ldr	r2, [r4, #0]
 8003892:	1b52      	subs	r2, r2, r5
 8003894:	d420      	bmi.n	80038d8 <_malloc_r+0xd0>
 8003896:	2a0b      	cmp	r2, #11
 8003898:	d917      	bls.n	80038ca <_malloc_r+0xc2>
 800389a:	1961      	adds	r1, r4, r5
 800389c:	42a3      	cmp	r3, r4
 800389e:	6025      	str	r5, [r4, #0]
 80038a0:	bf18      	it	ne
 80038a2:	6059      	strne	r1, [r3, #4]
 80038a4:	6863      	ldr	r3, [r4, #4]
 80038a6:	bf08      	it	eq
 80038a8:	f8c8 1000 	streq.w	r1, [r8]
 80038ac:	5162      	str	r2, [r4, r5]
 80038ae:	604b      	str	r3, [r1, #4]
 80038b0:	4630      	mov	r0, r6
 80038b2:	f000 f82f 	bl	8003914 <__malloc_unlock>
 80038b6:	f104 000b 	add.w	r0, r4, #11
 80038ba:	1d23      	adds	r3, r4, #4
 80038bc:	f020 0007 	bic.w	r0, r0, #7
 80038c0:	1ac2      	subs	r2, r0, r3
 80038c2:	bf1c      	itt	ne
 80038c4:	1a1b      	subne	r3, r3, r0
 80038c6:	50a3      	strne	r3, [r4, r2]
 80038c8:	e7af      	b.n	800382a <_malloc_r+0x22>
 80038ca:	6862      	ldr	r2, [r4, #4]
 80038cc:	42a3      	cmp	r3, r4
 80038ce:	bf0c      	ite	eq
 80038d0:	f8c8 2000 	streq.w	r2, [r8]
 80038d4:	605a      	strne	r2, [r3, #4]
 80038d6:	e7eb      	b.n	80038b0 <_malloc_r+0xa8>
 80038d8:	4623      	mov	r3, r4
 80038da:	6864      	ldr	r4, [r4, #4]
 80038dc:	e7ae      	b.n	800383c <_malloc_r+0x34>
 80038de:	463c      	mov	r4, r7
 80038e0:	687f      	ldr	r7, [r7, #4]
 80038e2:	e7b6      	b.n	8003852 <_malloc_r+0x4a>
 80038e4:	461a      	mov	r2, r3
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	42a3      	cmp	r3, r4
 80038ea:	d1fb      	bne.n	80038e4 <_malloc_r+0xdc>
 80038ec:	2300      	movs	r3, #0
 80038ee:	6053      	str	r3, [r2, #4]
 80038f0:	e7de      	b.n	80038b0 <_malloc_r+0xa8>
 80038f2:	230c      	movs	r3, #12
 80038f4:	6033      	str	r3, [r6, #0]
 80038f6:	4630      	mov	r0, r6
 80038f8:	f000 f80c 	bl	8003914 <__malloc_unlock>
 80038fc:	e794      	b.n	8003828 <_malloc_r+0x20>
 80038fe:	6005      	str	r5, [r0, #0]
 8003900:	e7d6      	b.n	80038b0 <_malloc_r+0xa8>
 8003902:	bf00      	nop
 8003904:	200002d8 	.word	0x200002d8

08003908 <__malloc_lock>:
 8003908:	4801      	ldr	r0, [pc, #4]	@ (8003910 <__malloc_lock+0x8>)
 800390a:	f7ff bee0 	b.w	80036ce <__retarget_lock_acquire_recursive>
 800390e:	bf00      	nop
 8003910:	200002d0 	.word	0x200002d0

08003914 <__malloc_unlock>:
 8003914:	4801      	ldr	r0, [pc, #4]	@ (800391c <__malloc_unlock+0x8>)
 8003916:	f7ff bedb 	b.w	80036d0 <__retarget_lock_release_recursive>
 800391a:	bf00      	nop
 800391c:	200002d0 	.word	0x200002d0

08003920 <__ssputs_r>:
 8003920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003924:	688e      	ldr	r6, [r1, #8]
 8003926:	461f      	mov	r7, r3
 8003928:	42be      	cmp	r6, r7
 800392a:	680b      	ldr	r3, [r1, #0]
 800392c:	4682      	mov	sl, r0
 800392e:	460c      	mov	r4, r1
 8003930:	4690      	mov	r8, r2
 8003932:	d82d      	bhi.n	8003990 <__ssputs_r+0x70>
 8003934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003938:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800393c:	d026      	beq.n	800398c <__ssputs_r+0x6c>
 800393e:	6965      	ldr	r5, [r4, #20]
 8003940:	6909      	ldr	r1, [r1, #16]
 8003942:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003946:	eba3 0901 	sub.w	r9, r3, r1
 800394a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800394e:	1c7b      	adds	r3, r7, #1
 8003950:	444b      	add	r3, r9
 8003952:	106d      	asrs	r5, r5, #1
 8003954:	429d      	cmp	r5, r3
 8003956:	bf38      	it	cc
 8003958:	461d      	movcc	r5, r3
 800395a:	0553      	lsls	r3, r2, #21
 800395c:	d527      	bpl.n	80039ae <__ssputs_r+0x8e>
 800395e:	4629      	mov	r1, r5
 8003960:	f7ff ff52 	bl	8003808 <_malloc_r>
 8003964:	4606      	mov	r6, r0
 8003966:	b360      	cbz	r0, 80039c2 <__ssputs_r+0xa2>
 8003968:	6921      	ldr	r1, [r4, #16]
 800396a:	464a      	mov	r2, r9
 800396c:	f000 fd6c 	bl	8004448 <memcpy>
 8003970:	89a3      	ldrh	r3, [r4, #12]
 8003972:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800397a:	81a3      	strh	r3, [r4, #12]
 800397c:	6126      	str	r6, [r4, #16]
 800397e:	6165      	str	r5, [r4, #20]
 8003980:	444e      	add	r6, r9
 8003982:	eba5 0509 	sub.w	r5, r5, r9
 8003986:	6026      	str	r6, [r4, #0]
 8003988:	60a5      	str	r5, [r4, #8]
 800398a:	463e      	mov	r6, r7
 800398c:	42be      	cmp	r6, r7
 800398e:	d900      	bls.n	8003992 <__ssputs_r+0x72>
 8003990:	463e      	mov	r6, r7
 8003992:	6820      	ldr	r0, [r4, #0]
 8003994:	4632      	mov	r2, r6
 8003996:	4641      	mov	r1, r8
 8003998:	f000 fd0a 	bl	80043b0 <memmove>
 800399c:	68a3      	ldr	r3, [r4, #8]
 800399e:	1b9b      	subs	r3, r3, r6
 80039a0:	60a3      	str	r3, [r4, #8]
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	4433      	add	r3, r6
 80039a6:	6023      	str	r3, [r4, #0]
 80039a8:	2000      	movs	r0, #0
 80039aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ae:	462a      	mov	r2, r5
 80039b0:	f000 fd5f 	bl	8004472 <_realloc_r>
 80039b4:	4606      	mov	r6, r0
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d1e0      	bne.n	800397c <__ssputs_r+0x5c>
 80039ba:	6921      	ldr	r1, [r4, #16]
 80039bc:	4650      	mov	r0, sl
 80039be:	f7ff feaf 	bl	8003720 <_free_r>
 80039c2:	230c      	movs	r3, #12
 80039c4:	f8ca 3000 	str.w	r3, [sl]
 80039c8:	89a3      	ldrh	r3, [r4, #12]
 80039ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039ce:	81a3      	strh	r3, [r4, #12]
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295
 80039d4:	e7e9      	b.n	80039aa <__ssputs_r+0x8a>
	...

080039d8 <_svfiprintf_r>:
 80039d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039dc:	4698      	mov	r8, r3
 80039de:	898b      	ldrh	r3, [r1, #12]
 80039e0:	061b      	lsls	r3, r3, #24
 80039e2:	b09d      	sub	sp, #116	@ 0x74
 80039e4:	4607      	mov	r7, r0
 80039e6:	460d      	mov	r5, r1
 80039e8:	4614      	mov	r4, r2
 80039ea:	d510      	bpl.n	8003a0e <_svfiprintf_r+0x36>
 80039ec:	690b      	ldr	r3, [r1, #16]
 80039ee:	b973      	cbnz	r3, 8003a0e <_svfiprintf_r+0x36>
 80039f0:	2140      	movs	r1, #64	@ 0x40
 80039f2:	f7ff ff09 	bl	8003808 <_malloc_r>
 80039f6:	6028      	str	r0, [r5, #0]
 80039f8:	6128      	str	r0, [r5, #16]
 80039fa:	b930      	cbnz	r0, 8003a0a <_svfiprintf_r+0x32>
 80039fc:	230c      	movs	r3, #12
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	b01d      	add	sp, #116	@ 0x74
 8003a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a0a:	2340      	movs	r3, #64	@ 0x40
 8003a0c:	616b      	str	r3, [r5, #20]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a12:	2320      	movs	r3, #32
 8003a14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a1c:	2330      	movs	r3, #48	@ 0x30
 8003a1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003bbc <_svfiprintf_r+0x1e4>
 8003a22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a26:	f04f 0901 	mov.w	r9, #1
 8003a2a:	4623      	mov	r3, r4
 8003a2c:	469a      	mov	sl, r3
 8003a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a32:	b10a      	cbz	r2, 8003a38 <_svfiprintf_r+0x60>
 8003a34:	2a25      	cmp	r2, #37	@ 0x25
 8003a36:	d1f9      	bne.n	8003a2c <_svfiprintf_r+0x54>
 8003a38:	ebba 0b04 	subs.w	fp, sl, r4
 8003a3c:	d00b      	beq.n	8003a56 <_svfiprintf_r+0x7e>
 8003a3e:	465b      	mov	r3, fp
 8003a40:	4622      	mov	r2, r4
 8003a42:	4629      	mov	r1, r5
 8003a44:	4638      	mov	r0, r7
 8003a46:	f7ff ff6b 	bl	8003920 <__ssputs_r>
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	f000 80a7 	beq.w	8003b9e <_svfiprintf_r+0x1c6>
 8003a50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a52:	445a      	add	r2, fp
 8003a54:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a56:	f89a 3000 	ldrb.w	r3, [sl]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 809f 	beq.w	8003b9e <_svfiprintf_r+0x1c6>
 8003a60:	2300      	movs	r3, #0
 8003a62:	f04f 32ff 	mov.w	r2, #4294967295
 8003a66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a6a:	f10a 0a01 	add.w	sl, sl, #1
 8003a6e:	9304      	str	r3, [sp, #16]
 8003a70:	9307      	str	r3, [sp, #28]
 8003a72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a76:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a78:	4654      	mov	r4, sl
 8003a7a:	2205      	movs	r2, #5
 8003a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a80:	484e      	ldr	r0, [pc, #312]	@ (8003bbc <_svfiprintf_r+0x1e4>)
 8003a82:	f7fc fbc5 	bl	8000210 <memchr>
 8003a86:	9a04      	ldr	r2, [sp, #16]
 8003a88:	b9d8      	cbnz	r0, 8003ac2 <_svfiprintf_r+0xea>
 8003a8a:	06d0      	lsls	r0, r2, #27
 8003a8c:	bf44      	itt	mi
 8003a8e:	2320      	movmi	r3, #32
 8003a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a94:	0711      	lsls	r1, r2, #28
 8003a96:	bf44      	itt	mi
 8003a98:	232b      	movmi	r3, #43	@ 0x2b
 8003a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aa4:	d015      	beq.n	8003ad2 <_svfiprintf_r+0xfa>
 8003aa6:	9a07      	ldr	r2, [sp, #28]
 8003aa8:	4654      	mov	r4, sl
 8003aaa:	2000      	movs	r0, #0
 8003aac:	f04f 0c0a 	mov.w	ip, #10
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ab6:	3b30      	subs	r3, #48	@ 0x30
 8003ab8:	2b09      	cmp	r3, #9
 8003aba:	d94b      	bls.n	8003b54 <_svfiprintf_r+0x17c>
 8003abc:	b1b0      	cbz	r0, 8003aec <_svfiprintf_r+0x114>
 8003abe:	9207      	str	r2, [sp, #28]
 8003ac0:	e014      	b.n	8003aec <_svfiprintf_r+0x114>
 8003ac2:	eba0 0308 	sub.w	r3, r0, r8
 8003ac6:	fa09 f303 	lsl.w	r3, r9, r3
 8003aca:	4313      	orrs	r3, r2
 8003acc:	9304      	str	r3, [sp, #16]
 8003ace:	46a2      	mov	sl, r4
 8003ad0:	e7d2      	b.n	8003a78 <_svfiprintf_r+0xa0>
 8003ad2:	9b03      	ldr	r3, [sp, #12]
 8003ad4:	1d19      	adds	r1, r3, #4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	9103      	str	r1, [sp, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bfbb      	ittet	lt
 8003ade:	425b      	neglt	r3, r3
 8003ae0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ae4:	9307      	strge	r3, [sp, #28]
 8003ae6:	9307      	strlt	r3, [sp, #28]
 8003ae8:	bfb8      	it	lt
 8003aea:	9204      	strlt	r2, [sp, #16]
 8003aec:	7823      	ldrb	r3, [r4, #0]
 8003aee:	2b2e      	cmp	r3, #46	@ 0x2e
 8003af0:	d10a      	bne.n	8003b08 <_svfiprintf_r+0x130>
 8003af2:	7863      	ldrb	r3, [r4, #1]
 8003af4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003af6:	d132      	bne.n	8003b5e <_svfiprintf_r+0x186>
 8003af8:	9b03      	ldr	r3, [sp, #12]
 8003afa:	1d1a      	adds	r2, r3, #4
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	9203      	str	r2, [sp, #12]
 8003b00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b04:	3402      	adds	r4, #2
 8003b06:	9305      	str	r3, [sp, #20]
 8003b08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003bcc <_svfiprintf_r+0x1f4>
 8003b0c:	7821      	ldrb	r1, [r4, #0]
 8003b0e:	2203      	movs	r2, #3
 8003b10:	4650      	mov	r0, sl
 8003b12:	f7fc fb7d 	bl	8000210 <memchr>
 8003b16:	b138      	cbz	r0, 8003b28 <_svfiprintf_r+0x150>
 8003b18:	9b04      	ldr	r3, [sp, #16]
 8003b1a:	eba0 000a 	sub.w	r0, r0, sl
 8003b1e:	2240      	movs	r2, #64	@ 0x40
 8003b20:	4082      	lsls	r2, r0
 8003b22:	4313      	orrs	r3, r2
 8003b24:	3401      	adds	r4, #1
 8003b26:	9304      	str	r3, [sp, #16]
 8003b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b2c:	4824      	ldr	r0, [pc, #144]	@ (8003bc0 <_svfiprintf_r+0x1e8>)
 8003b2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b32:	2206      	movs	r2, #6
 8003b34:	f7fc fb6c 	bl	8000210 <memchr>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d036      	beq.n	8003baa <_svfiprintf_r+0x1d2>
 8003b3c:	4b21      	ldr	r3, [pc, #132]	@ (8003bc4 <_svfiprintf_r+0x1ec>)
 8003b3e:	bb1b      	cbnz	r3, 8003b88 <_svfiprintf_r+0x1b0>
 8003b40:	9b03      	ldr	r3, [sp, #12]
 8003b42:	3307      	adds	r3, #7
 8003b44:	f023 0307 	bic.w	r3, r3, #7
 8003b48:	3308      	adds	r3, #8
 8003b4a:	9303      	str	r3, [sp, #12]
 8003b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b4e:	4433      	add	r3, r6
 8003b50:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b52:	e76a      	b.n	8003a2a <_svfiprintf_r+0x52>
 8003b54:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b58:	460c      	mov	r4, r1
 8003b5a:	2001      	movs	r0, #1
 8003b5c:	e7a8      	b.n	8003ab0 <_svfiprintf_r+0xd8>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	3401      	adds	r4, #1
 8003b62:	9305      	str	r3, [sp, #20]
 8003b64:	4619      	mov	r1, r3
 8003b66:	f04f 0c0a 	mov.w	ip, #10
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b70:	3a30      	subs	r2, #48	@ 0x30
 8003b72:	2a09      	cmp	r2, #9
 8003b74:	d903      	bls.n	8003b7e <_svfiprintf_r+0x1a6>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0c6      	beq.n	8003b08 <_svfiprintf_r+0x130>
 8003b7a:	9105      	str	r1, [sp, #20]
 8003b7c:	e7c4      	b.n	8003b08 <_svfiprintf_r+0x130>
 8003b7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b82:	4604      	mov	r4, r0
 8003b84:	2301      	movs	r3, #1
 8003b86:	e7f0      	b.n	8003b6a <_svfiprintf_r+0x192>
 8003b88:	ab03      	add	r3, sp, #12
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	462a      	mov	r2, r5
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc8 <_svfiprintf_r+0x1f0>)
 8003b90:	a904      	add	r1, sp, #16
 8003b92:	4638      	mov	r0, r7
 8003b94:	f3af 8000 	nop.w
 8003b98:	1c42      	adds	r2, r0, #1
 8003b9a:	4606      	mov	r6, r0
 8003b9c:	d1d6      	bne.n	8003b4c <_svfiprintf_r+0x174>
 8003b9e:	89ab      	ldrh	r3, [r5, #12]
 8003ba0:	065b      	lsls	r3, r3, #25
 8003ba2:	f53f af2d 	bmi.w	8003a00 <_svfiprintf_r+0x28>
 8003ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ba8:	e72c      	b.n	8003a04 <_svfiprintf_r+0x2c>
 8003baa:	ab03      	add	r3, sp, #12
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	462a      	mov	r2, r5
 8003bb0:	4b05      	ldr	r3, [pc, #20]	@ (8003bc8 <_svfiprintf_r+0x1f0>)
 8003bb2:	a904      	add	r1, sp, #16
 8003bb4:	4638      	mov	r0, r7
 8003bb6:	f000 f9bb 	bl	8003f30 <_printf_i>
 8003bba:	e7ed      	b.n	8003b98 <_svfiprintf_r+0x1c0>
 8003bbc:	080046ad 	.word	0x080046ad
 8003bc0:	080046b7 	.word	0x080046b7
 8003bc4:	00000000 	.word	0x00000000
 8003bc8:	08003921 	.word	0x08003921
 8003bcc:	080046b3 	.word	0x080046b3

08003bd0 <__sfputc_r>:
 8003bd0:	6893      	ldr	r3, [r2, #8]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	b410      	push	{r4}
 8003bd8:	6093      	str	r3, [r2, #8]
 8003bda:	da08      	bge.n	8003bee <__sfputc_r+0x1e>
 8003bdc:	6994      	ldr	r4, [r2, #24]
 8003bde:	42a3      	cmp	r3, r4
 8003be0:	db01      	blt.n	8003be6 <__sfputc_r+0x16>
 8003be2:	290a      	cmp	r1, #10
 8003be4:	d103      	bne.n	8003bee <__sfputc_r+0x1e>
 8003be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bea:	f7ff bc06 	b.w	80033fa <__swbuf_r>
 8003bee:	6813      	ldr	r3, [r2, #0]
 8003bf0:	1c58      	adds	r0, r3, #1
 8003bf2:	6010      	str	r0, [r2, #0]
 8003bf4:	7019      	strb	r1, [r3, #0]
 8003bf6:	4608      	mov	r0, r1
 8003bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <__sfputs_r>:
 8003bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c00:	4606      	mov	r6, r0
 8003c02:	460f      	mov	r7, r1
 8003c04:	4614      	mov	r4, r2
 8003c06:	18d5      	adds	r5, r2, r3
 8003c08:	42ac      	cmp	r4, r5
 8003c0a:	d101      	bne.n	8003c10 <__sfputs_r+0x12>
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	e007      	b.n	8003c20 <__sfputs_r+0x22>
 8003c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c14:	463a      	mov	r2, r7
 8003c16:	4630      	mov	r0, r6
 8003c18:	f7ff ffda 	bl	8003bd0 <__sfputc_r>
 8003c1c:	1c43      	adds	r3, r0, #1
 8003c1e:	d1f3      	bne.n	8003c08 <__sfputs_r+0xa>
 8003c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c24 <_vfiprintf_r>:
 8003c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c28:	460d      	mov	r5, r1
 8003c2a:	b09d      	sub	sp, #116	@ 0x74
 8003c2c:	4614      	mov	r4, r2
 8003c2e:	4698      	mov	r8, r3
 8003c30:	4606      	mov	r6, r0
 8003c32:	b118      	cbz	r0, 8003c3c <_vfiprintf_r+0x18>
 8003c34:	6a03      	ldr	r3, [r0, #32]
 8003c36:	b90b      	cbnz	r3, 8003c3c <_vfiprintf_r+0x18>
 8003c38:	f7ff fad6 	bl	80031e8 <__sinit>
 8003c3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c3e:	07d9      	lsls	r1, r3, #31
 8003c40:	d405      	bmi.n	8003c4e <_vfiprintf_r+0x2a>
 8003c42:	89ab      	ldrh	r3, [r5, #12]
 8003c44:	059a      	lsls	r2, r3, #22
 8003c46:	d402      	bmi.n	8003c4e <_vfiprintf_r+0x2a>
 8003c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c4a:	f7ff fd40 	bl	80036ce <__retarget_lock_acquire_recursive>
 8003c4e:	89ab      	ldrh	r3, [r5, #12]
 8003c50:	071b      	lsls	r3, r3, #28
 8003c52:	d501      	bpl.n	8003c58 <_vfiprintf_r+0x34>
 8003c54:	692b      	ldr	r3, [r5, #16]
 8003c56:	b99b      	cbnz	r3, 8003c80 <_vfiprintf_r+0x5c>
 8003c58:	4629      	mov	r1, r5
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	f7ff fc0c 	bl	8003478 <__swsetup_r>
 8003c60:	b170      	cbz	r0, 8003c80 <_vfiprintf_r+0x5c>
 8003c62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c64:	07dc      	lsls	r4, r3, #31
 8003c66:	d504      	bpl.n	8003c72 <_vfiprintf_r+0x4e>
 8003c68:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6c:	b01d      	add	sp, #116	@ 0x74
 8003c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c72:	89ab      	ldrh	r3, [r5, #12]
 8003c74:	0598      	lsls	r0, r3, #22
 8003c76:	d4f7      	bmi.n	8003c68 <_vfiprintf_r+0x44>
 8003c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c7a:	f7ff fd29 	bl	80036d0 <__retarget_lock_release_recursive>
 8003c7e:	e7f3      	b.n	8003c68 <_vfiprintf_r+0x44>
 8003c80:	2300      	movs	r3, #0
 8003c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c84:	2320      	movs	r3, #32
 8003c86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c8e:	2330      	movs	r3, #48	@ 0x30
 8003c90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003e40 <_vfiprintf_r+0x21c>
 8003c94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c98:	f04f 0901 	mov.w	r9, #1
 8003c9c:	4623      	mov	r3, r4
 8003c9e:	469a      	mov	sl, r3
 8003ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ca4:	b10a      	cbz	r2, 8003caa <_vfiprintf_r+0x86>
 8003ca6:	2a25      	cmp	r2, #37	@ 0x25
 8003ca8:	d1f9      	bne.n	8003c9e <_vfiprintf_r+0x7a>
 8003caa:	ebba 0b04 	subs.w	fp, sl, r4
 8003cae:	d00b      	beq.n	8003cc8 <_vfiprintf_r+0xa4>
 8003cb0:	465b      	mov	r3, fp
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	4630      	mov	r0, r6
 8003cb8:	f7ff ffa1 	bl	8003bfe <__sfputs_r>
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	f000 80a7 	beq.w	8003e10 <_vfiprintf_r+0x1ec>
 8003cc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003cc4:	445a      	add	r2, fp
 8003cc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8003cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 809f 	beq.w	8003e10 <_vfiprintf_r+0x1ec>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cdc:	f10a 0a01 	add.w	sl, sl, #1
 8003ce0:	9304      	str	r3, [sp, #16]
 8003ce2:	9307      	str	r3, [sp, #28]
 8003ce4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ce8:	931a      	str	r3, [sp, #104]	@ 0x68
 8003cea:	4654      	mov	r4, sl
 8003cec:	2205      	movs	r2, #5
 8003cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf2:	4853      	ldr	r0, [pc, #332]	@ (8003e40 <_vfiprintf_r+0x21c>)
 8003cf4:	f7fc fa8c 	bl	8000210 <memchr>
 8003cf8:	9a04      	ldr	r2, [sp, #16]
 8003cfa:	b9d8      	cbnz	r0, 8003d34 <_vfiprintf_r+0x110>
 8003cfc:	06d1      	lsls	r1, r2, #27
 8003cfe:	bf44      	itt	mi
 8003d00:	2320      	movmi	r3, #32
 8003d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d06:	0713      	lsls	r3, r2, #28
 8003d08:	bf44      	itt	mi
 8003d0a:	232b      	movmi	r3, #43	@ 0x2b
 8003d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d10:	f89a 3000 	ldrb.w	r3, [sl]
 8003d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d16:	d015      	beq.n	8003d44 <_vfiprintf_r+0x120>
 8003d18:	9a07      	ldr	r2, [sp, #28]
 8003d1a:	4654      	mov	r4, sl
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f04f 0c0a 	mov.w	ip, #10
 8003d22:	4621      	mov	r1, r4
 8003d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d28:	3b30      	subs	r3, #48	@ 0x30
 8003d2a:	2b09      	cmp	r3, #9
 8003d2c:	d94b      	bls.n	8003dc6 <_vfiprintf_r+0x1a2>
 8003d2e:	b1b0      	cbz	r0, 8003d5e <_vfiprintf_r+0x13a>
 8003d30:	9207      	str	r2, [sp, #28]
 8003d32:	e014      	b.n	8003d5e <_vfiprintf_r+0x13a>
 8003d34:	eba0 0308 	sub.w	r3, r0, r8
 8003d38:	fa09 f303 	lsl.w	r3, r9, r3
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	9304      	str	r3, [sp, #16]
 8003d40:	46a2      	mov	sl, r4
 8003d42:	e7d2      	b.n	8003cea <_vfiprintf_r+0xc6>
 8003d44:	9b03      	ldr	r3, [sp, #12]
 8003d46:	1d19      	adds	r1, r3, #4
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	9103      	str	r1, [sp, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bfbb      	ittet	lt
 8003d50:	425b      	neglt	r3, r3
 8003d52:	f042 0202 	orrlt.w	r2, r2, #2
 8003d56:	9307      	strge	r3, [sp, #28]
 8003d58:	9307      	strlt	r3, [sp, #28]
 8003d5a:	bfb8      	it	lt
 8003d5c:	9204      	strlt	r2, [sp, #16]
 8003d5e:	7823      	ldrb	r3, [r4, #0]
 8003d60:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d62:	d10a      	bne.n	8003d7a <_vfiprintf_r+0x156>
 8003d64:	7863      	ldrb	r3, [r4, #1]
 8003d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d68:	d132      	bne.n	8003dd0 <_vfiprintf_r+0x1ac>
 8003d6a:	9b03      	ldr	r3, [sp, #12]
 8003d6c:	1d1a      	adds	r2, r3, #4
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	9203      	str	r2, [sp, #12]
 8003d72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d76:	3402      	adds	r4, #2
 8003d78:	9305      	str	r3, [sp, #20]
 8003d7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003e50 <_vfiprintf_r+0x22c>
 8003d7e:	7821      	ldrb	r1, [r4, #0]
 8003d80:	2203      	movs	r2, #3
 8003d82:	4650      	mov	r0, sl
 8003d84:	f7fc fa44 	bl	8000210 <memchr>
 8003d88:	b138      	cbz	r0, 8003d9a <_vfiprintf_r+0x176>
 8003d8a:	9b04      	ldr	r3, [sp, #16]
 8003d8c:	eba0 000a 	sub.w	r0, r0, sl
 8003d90:	2240      	movs	r2, #64	@ 0x40
 8003d92:	4082      	lsls	r2, r0
 8003d94:	4313      	orrs	r3, r2
 8003d96:	3401      	adds	r4, #1
 8003d98:	9304      	str	r3, [sp, #16]
 8003d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d9e:	4829      	ldr	r0, [pc, #164]	@ (8003e44 <_vfiprintf_r+0x220>)
 8003da0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003da4:	2206      	movs	r2, #6
 8003da6:	f7fc fa33 	bl	8000210 <memchr>
 8003daa:	2800      	cmp	r0, #0
 8003dac:	d03f      	beq.n	8003e2e <_vfiprintf_r+0x20a>
 8003dae:	4b26      	ldr	r3, [pc, #152]	@ (8003e48 <_vfiprintf_r+0x224>)
 8003db0:	bb1b      	cbnz	r3, 8003dfa <_vfiprintf_r+0x1d6>
 8003db2:	9b03      	ldr	r3, [sp, #12]
 8003db4:	3307      	adds	r3, #7
 8003db6:	f023 0307 	bic.w	r3, r3, #7
 8003dba:	3308      	adds	r3, #8
 8003dbc:	9303      	str	r3, [sp, #12]
 8003dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dc0:	443b      	add	r3, r7
 8003dc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dc4:	e76a      	b.n	8003c9c <_vfiprintf_r+0x78>
 8003dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dca:	460c      	mov	r4, r1
 8003dcc:	2001      	movs	r0, #1
 8003dce:	e7a8      	b.n	8003d22 <_vfiprintf_r+0xfe>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	3401      	adds	r4, #1
 8003dd4:	9305      	str	r3, [sp, #20]
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f04f 0c0a 	mov.w	ip, #10
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003de2:	3a30      	subs	r2, #48	@ 0x30
 8003de4:	2a09      	cmp	r2, #9
 8003de6:	d903      	bls.n	8003df0 <_vfiprintf_r+0x1cc>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0c6      	beq.n	8003d7a <_vfiprintf_r+0x156>
 8003dec:	9105      	str	r1, [sp, #20]
 8003dee:	e7c4      	b.n	8003d7a <_vfiprintf_r+0x156>
 8003df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003df4:	4604      	mov	r4, r0
 8003df6:	2301      	movs	r3, #1
 8003df8:	e7f0      	b.n	8003ddc <_vfiprintf_r+0x1b8>
 8003dfa:	ab03      	add	r3, sp, #12
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	462a      	mov	r2, r5
 8003e00:	4b12      	ldr	r3, [pc, #72]	@ (8003e4c <_vfiprintf_r+0x228>)
 8003e02:	a904      	add	r1, sp, #16
 8003e04:	4630      	mov	r0, r6
 8003e06:	f3af 8000 	nop.w
 8003e0a:	4607      	mov	r7, r0
 8003e0c:	1c78      	adds	r0, r7, #1
 8003e0e:	d1d6      	bne.n	8003dbe <_vfiprintf_r+0x19a>
 8003e10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e12:	07d9      	lsls	r1, r3, #31
 8003e14:	d405      	bmi.n	8003e22 <_vfiprintf_r+0x1fe>
 8003e16:	89ab      	ldrh	r3, [r5, #12]
 8003e18:	059a      	lsls	r2, r3, #22
 8003e1a:	d402      	bmi.n	8003e22 <_vfiprintf_r+0x1fe>
 8003e1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e1e:	f7ff fc57 	bl	80036d0 <__retarget_lock_release_recursive>
 8003e22:	89ab      	ldrh	r3, [r5, #12]
 8003e24:	065b      	lsls	r3, r3, #25
 8003e26:	f53f af1f 	bmi.w	8003c68 <_vfiprintf_r+0x44>
 8003e2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e2c:	e71e      	b.n	8003c6c <_vfiprintf_r+0x48>
 8003e2e:	ab03      	add	r3, sp, #12
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	462a      	mov	r2, r5
 8003e34:	4b05      	ldr	r3, [pc, #20]	@ (8003e4c <_vfiprintf_r+0x228>)
 8003e36:	a904      	add	r1, sp, #16
 8003e38:	4630      	mov	r0, r6
 8003e3a:	f000 f879 	bl	8003f30 <_printf_i>
 8003e3e:	e7e4      	b.n	8003e0a <_vfiprintf_r+0x1e6>
 8003e40:	080046ad 	.word	0x080046ad
 8003e44:	080046b7 	.word	0x080046b7
 8003e48:	00000000 	.word	0x00000000
 8003e4c:	08003bff 	.word	0x08003bff
 8003e50:	080046b3 	.word	0x080046b3

08003e54 <_printf_common>:
 8003e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e58:	4616      	mov	r6, r2
 8003e5a:	4698      	mov	r8, r3
 8003e5c:	688a      	ldr	r2, [r1, #8]
 8003e5e:	690b      	ldr	r3, [r1, #16]
 8003e60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e64:	4293      	cmp	r3, r2
 8003e66:	bfb8      	it	lt
 8003e68:	4613      	movlt	r3, r2
 8003e6a:	6033      	str	r3, [r6, #0]
 8003e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e70:	4607      	mov	r7, r0
 8003e72:	460c      	mov	r4, r1
 8003e74:	b10a      	cbz	r2, 8003e7a <_printf_common+0x26>
 8003e76:	3301      	adds	r3, #1
 8003e78:	6033      	str	r3, [r6, #0]
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	0699      	lsls	r1, r3, #26
 8003e7e:	bf42      	ittt	mi
 8003e80:	6833      	ldrmi	r3, [r6, #0]
 8003e82:	3302      	addmi	r3, #2
 8003e84:	6033      	strmi	r3, [r6, #0]
 8003e86:	6825      	ldr	r5, [r4, #0]
 8003e88:	f015 0506 	ands.w	r5, r5, #6
 8003e8c:	d106      	bne.n	8003e9c <_printf_common+0x48>
 8003e8e:	f104 0a19 	add.w	sl, r4, #25
 8003e92:	68e3      	ldr	r3, [r4, #12]
 8003e94:	6832      	ldr	r2, [r6, #0]
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	42ab      	cmp	r3, r5
 8003e9a:	dc26      	bgt.n	8003eea <_printf_common+0x96>
 8003e9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ea0:	6822      	ldr	r2, [r4, #0]
 8003ea2:	3b00      	subs	r3, #0
 8003ea4:	bf18      	it	ne
 8003ea6:	2301      	movne	r3, #1
 8003ea8:	0692      	lsls	r2, r2, #26
 8003eaa:	d42b      	bmi.n	8003f04 <_printf_common+0xb0>
 8003eac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	47c8      	blx	r9
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	d01e      	beq.n	8003ef8 <_printf_common+0xa4>
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	6922      	ldr	r2, [r4, #16]
 8003ebe:	f003 0306 	and.w	r3, r3, #6
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	bf02      	ittt	eq
 8003ec6:	68e5      	ldreq	r5, [r4, #12]
 8003ec8:	6833      	ldreq	r3, [r6, #0]
 8003eca:	1aed      	subeq	r5, r5, r3
 8003ecc:	68a3      	ldr	r3, [r4, #8]
 8003ece:	bf0c      	ite	eq
 8003ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ed4:	2500      	movne	r5, #0
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	bfc4      	itt	gt
 8003eda:	1a9b      	subgt	r3, r3, r2
 8003edc:	18ed      	addgt	r5, r5, r3
 8003ede:	2600      	movs	r6, #0
 8003ee0:	341a      	adds	r4, #26
 8003ee2:	42b5      	cmp	r5, r6
 8003ee4:	d11a      	bne.n	8003f1c <_printf_common+0xc8>
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	e008      	b.n	8003efc <_printf_common+0xa8>
 8003eea:	2301      	movs	r3, #1
 8003eec:	4652      	mov	r2, sl
 8003eee:	4641      	mov	r1, r8
 8003ef0:	4638      	mov	r0, r7
 8003ef2:	47c8      	blx	r9
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	d103      	bne.n	8003f00 <_printf_common+0xac>
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f00:	3501      	adds	r5, #1
 8003f02:	e7c6      	b.n	8003e92 <_printf_common+0x3e>
 8003f04:	18e1      	adds	r1, r4, r3
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	2030      	movs	r0, #48	@ 0x30
 8003f0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f0e:	4422      	add	r2, r4
 8003f10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f18:	3302      	adds	r3, #2
 8003f1a:	e7c7      	b.n	8003eac <_printf_common+0x58>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	4622      	mov	r2, r4
 8003f20:	4641      	mov	r1, r8
 8003f22:	4638      	mov	r0, r7
 8003f24:	47c8      	blx	r9
 8003f26:	3001      	adds	r0, #1
 8003f28:	d0e6      	beq.n	8003ef8 <_printf_common+0xa4>
 8003f2a:	3601      	adds	r6, #1
 8003f2c:	e7d9      	b.n	8003ee2 <_printf_common+0x8e>
	...

08003f30 <_printf_i>:
 8003f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f34:	7e0f      	ldrb	r7, [r1, #24]
 8003f36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f38:	2f78      	cmp	r7, #120	@ 0x78
 8003f3a:	4691      	mov	r9, r2
 8003f3c:	4680      	mov	r8, r0
 8003f3e:	460c      	mov	r4, r1
 8003f40:	469a      	mov	sl, r3
 8003f42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f46:	d807      	bhi.n	8003f58 <_printf_i+0x28>
 8003f48:	2f62      	cmp	r7, #98	@ 0x62
 8003f4a:	d80a      	bhi.n	8003f62 <_printf_i+0x32>
 8003f4c:	2f00      	cmp	r7, #0
 8003f4e:	f000 80d2 	beq.w	80040f6 <_printf_i+0x1c6>
 8003f52:	2f58      	cmp	r7, #88	@ 0x58
 8003f54:	f000 80b9 	beq.w	80040ca <_printf_i+0x19a>
 8003f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f60:	e03a      	b.n	8003fd8 <_printf_i+0xa8>
 8003f62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f66:	2b15      	cmp	r3, #21
 8003f68:	d8f6      	bhi.n	8003f58 <_printf_i+0x28>
 8003f6a:	a101      	add	r1, pc, #4	@ (adr r1, 8003f70 <_printf_i+0x40>)
 8003f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f70:	08003fc9 	.word	0x08003fc9
 8003f74:	08003fdd 	.word	0x08003fdd
 8003f78:	08003f59 	.word	0x08003f59
 8003f7c:	08003f59 	.word	0x08003f59
 8003f80:	08003f59 	.word	0x08003f59
 8003f84:	08003f59 	.word	0x08003f59
 8003f88:	08003fdd 	.word	0x08003fdd
 8003f8c:	08003f59 	.word	0x08003f59
 8003f90:	08003f59 	.word	0x08003f59
 8003f94:	08003f59 	.word	0x08003f59
 8003f98:	08003f59 	.word	0x08003f59
 8003f9c:	080040dd 	.word	0x080040dd
 8003fa0:	08004007 	.word	0x08004007
 8003fa4:	08004097 	.word	0x08004097
 8003fa8:	08003f59 	.word	0x08003f59
 8003fac:	08003f59 	.word	0x08003f59
 8003fb0:	080040ff 	.word	0x080040ff
 8003fb4:	08003f59 	.word	0x08003f59
 8003fb8:	08004007 	.word	0x08004007
 8003fbc:	08003f59 	.word	0x08003f59
 8003fc0:	08003f59 	.word	0x08003f59
 8003fc4:	0800409f 	.word	0x0800409f
 8003fc8:	6833      	ldr	r3, [r6, #0]
 8003fca:	1d1a      	adds	r2, r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6032      	str	r2, [r6, #0]
 8003fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e09d      	b.n	8004118 <_printf_i+0x1e8>
 8003fdc:	6833      	ldr	r3, [r6, #0]
 8003fde:	6820      	ldr	r0, [r4, #0]
 8003fe0:	1d19      	adds	r1, r3, #4
 8003fe2:	6031      	str	r1, [r6, #0]
 8003fe4:	0606      	lsls	r6, r0, #24
 8003fe6:	d501      	bpl.n	8003fec <_printf_i+0xbc>
 8003fe8:	681d      	ldr	r5, [r3, #0]
 8003fea:	e003      	b.n	8003ff4 <_printf_i+0xc4>
 8003fec:	0645      	lsls	r5, r0, #25
 8003fee:	d5fb      	bpl.n	8003fe8 <_printf_i+0xb8>
 8003ff0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ff4:	2d00      	cmp	r5, #0
 8003ff6:	da03      	bge.n	8004000 <_printf_i+0xd0>
 8003ff8:	232d      	movs	r3, #45	@ 0x2d
 8003ffa:	426d      	negs	r5, r5
 8003ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004000:	4859      	ldr	r0, [pc, #356]	@ (8004168 <_printf_i+0x238>)
 8004002:	230a      	movs	r3, #10
 8004004:	e011      	b.n	800402a <_printf_i+0xfa>
 8004006:	6821      	ldr	r1, [r4, #0]
 8004008:	6833      	ldr	r3, [r6, #0]
 800400a:	0608      	lsls	r0, r1, #24
 800400c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004010:	d402      	bmi.n	8004018 <_printf_i+0xe8>
 8004012:	0649      	lsls	r1, r1, #25
 8004014:	bf48      	it	mi
 8004016:	b2ad      	uxthmi	r5, r5
 8004018:	2f6f      	cmp	r7, #111	@ 0x6f
 800401a:	4853      	ldr	r0, [pc, #332]	@ (8004168 <_printf_i+0x238>)
 800401c:	6033      	str	r3, [r6, #0]
 800401e:	bf14      	ite	ne
 8004020:	230a      	movne	r3, #10
 8004022:	2308      	moveq	r3, #8
 8004024:	2100      	movs	r1, #0
 8004026:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800402a:	6866      	ldr	r6, [r4, #4]
 800402c:	60a6      	str	r6, [r4, #8]
 800402e:	2e00      	cmp	r6, #0
 8004030:	bfa2      	ittt	ge
 8004032:	6821      	ldrge	r1, [r4, #0]
 8004034:	f021 0104 	bicge.w	r1, r1, #4
 8004038:	6021      	strge	r1, [r4, #0]
 800403a:	b90d      	cbnz	r5, 8004040 <_printf_i+0x110>
 800403c:	2e00      	cmp	r6, #0
 800403e:	d04b      	beq.n	80040d8 <_printf_i+0x1a8>
 8004040:	4616      	mov	r6, r2
 8004042:	fbb5 f1f3 	udiv	r1, r5, r3
 8004046:	fb03 5711 	mls	r7, r3, r1, r5
 800404a:	5dc7      	ldrb	r7, [r0, r7]
 800404c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004050:	462f      	mov	r7, r5
 8004052:	42bb      	cmp	r3, r7
 8004054:	460d      	mov	r5, r1
 8004056:	d9f4      	bls.n	8004042 <_printf_i+0x112>
 8004058:	2b08      	cmp	r3, #8
 800405a:	d10b      	bne.n	8004074 <_printf_i+0x144>
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	07df      	lsls	r7, r3, #31
 8004060:	d508      	bpl.n	8004074 <_printf_i+0x144>
 8004062:	6923      	ldr	r3, [r4, #16]
 8004064:	6861      	ldr	r1, [r4, #4]
 8004066:	4299      	cmp	r1, r3
 8004068:	bfde      	ittt	le
 800406a:	2330      	movle	r3, #48	@ 0x30
 800406c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004070:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004074:	1b92      	subs	r2, r2, r6
 8004076:	6122      	str	r2, [r4, #16]
 8004078:	f8cd a000 	str.w	sl, [sp]
 800407c:	464b      	mov	r3, r9
 800407e:	aa03      	add	r2, sp, #12
 8004080:	4621      	mov	r1, r4
 8004082:	4640      	mov	r0, r8
 8004084:	f7ff fee6 	bl	8003e54 <_printf_common>
 8004088:	3001      	adds	r0, #1
 800408a:	d14a      	bne.n	8004122 <_printf_i+0x1f2>
 800408c:	f04f 30ff 	mov.w	r0, #4294967295
 8004090:	b004      	add	sp, #16
 8004092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	f043 0320 	orr.w	r3, r3, #32
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	4833      	ldr	r0, [pc, #204]	@ (800416c <_printf_i+0x23c>)
 80040a0:	2778      	movs	r7, #120	@ 0x78
 80040a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	6831      	ldr	r1, [r6, #0]
 80040aa:	061f      	lsls	r7, r3, #24
 80040ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80040b0:	d402      	bmi.n	80040b8 <_printf_i+0x188>
 80040b2:	065f      	lsls	r7, r3, #25
 80040b4:	bf48      	it	mi
 80040b6:	b2ad      	uxthmi	r5, r5
 80040b8:	6031      	str	r1, [r6, #0]
 80040ba:	07d9      	lsls	r1, r3, #31
 80040bc:	bf44      	itt	mi
 80040be:	f043 0320 	orrmi.w	r3, r3, #32
 80040c2:	6023      	strmi	r3, [r4, #0]
 80040c4:	b11d      	cbz	r5, 80040ce <_printf_i+0x19e>
 80040c6:	2310      	movs	r3, #16
 80040c8:	e7ac      	b.n	8004024 <_printf_i+0xf4>
 80040ca:	4827      	ldr	r0, [pc, #156]	@ (8004168 <_printf_i+0x238>)
 80040cc:	e7e9      	b.n	80040a2 <_printf_i+0x172>
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	f023 0320 	bic.w	r3, r3, #32
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	e7f6      	b.n	80040c6 <_printf_i+0x196>
 80040d8:	4616      	mov	r6, r2
 80040da:	e7bd      	b.n	8004058 <_printf_i+0x128>
 80040dc:	6833      	ldr	r3, [r6, #0]
 80040de:	6825      	ldr	r5, [r4, #0]
 80040e0:	6961      	ldr	r1, [r4, #20]
 80040e2:	1d18      	adds	r0, r3, #4
 80040e4:	6030      	str	r0, [r6, #0]
 80040e6:	062e      	lsls	r6, r5, #24
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	d501      	bpl.n	80040f0 <_printf_i+0x1c0>
 80040ec:	6019      	str	r1, [r3, #0]
 80040ee:	e002      	b.n	80040f6 <_printf_i+0x1c6>
 80040f0:	0668      	lsls	r0, r5, #25
 80040f2:	d5fb      	bpl.n	80040ec <_printf_i+0x1bc>
 80040f4:	8019      	strh	r1, [r3, #0]
 80040f6:	2300      	movs	r3, #0
 80040f8:	6123      	str	r3, [r4, #16]
 80040fa:	4616      	mov	r6, r2
 80040fc:	e7bc      	b.n	8004078 <_printf_i+0x148>
 80040fe:	6833      	ldr	r3, [r6, #0]
 8004100:	1d1a      	adds	r2, r3, #4
 8004102:	6032      	str	r2, [r6, #0]
 8004104:	681e      	ldr	r6, [r3, #0]
 8004106:	6862      	ldr	r2, [r4, #4]
 8004108:	2100      	movs	r1, #0
 800410a:	4630      	mov	r0, r6
 800410c:	f7fc f880 	bl	8000210 <memchr>
 8004110:	b108      	cbz	r0, 8004116 <_printf_i+0x1e6>
 8004112:	1b80      	subs	r0, r0, r6
 8004114:	6060      	str	r0, [r4, #4]
 8004116:	6863      	ldr	r3, [r4, #4]
 8004118:	6123      	str	r3, [r4, #16]
 800411a:	2300      	movs	r3, #0
 800411c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004120:	e7aa      	b.n	8004078 <_printf_i+0x148>
 8004122:	6923      	ldr	r3, [r4, #16]
 8004124:	4632      	mov	r2, r6
 8004126:	4649      	mov	r1, r9
 8004128:	4640      	mov	r0, r8
 800412a:	47d0      	blx	sl
 800412c:	3001      	adds	r0, #1
 800412e:	d0ad      	beq.n	800408c <_printf_i+0x15c>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	079b      	lsls	r3, r3, #30
 8004134:	d413      	bmi.n	800415e <_printf_i+0x22e>
 8004136:	68e0      	ldr	r0, [r4, #12]
 8004138:	9b03      	ldr	r3, [sp, #12]
 800413a:	4298      	cmp	r0, r3
 800413c:	bfb8      	it	lt
 800413e:	4618      	movlt	r0, r3
 8004140:	e7a6      	b.n	8004090 <_printf_i+0x160>
 8004142:	2301      	movs	r3, #1
 8004144:	4632      	mov	r2, r6
 8004146:	4649      	mov	r1, r9
 8004148:	4640      	mov	r0, r8
 800414a:	47d0      	blx	sl
 800414c:	3001      	adds	r0, #1
 800414e:	d09d      	beq.n	800408c <_printf_i+0x15c>
 8004150:	3501      	adds	r5, #1
 8004152:	68e3      	ldr	r3, [r4, #12]
 8004154:	9903      	ldr	r1, [sp, #12]
 8004156:	1a5b      	subs	r3, r3, r1
 8004158:	42ab      	cmp	r3, r5
 800415a:	dcf2      	bgt.n	8004142 <_printf_i+0x212>
 800415c:	e7eb      	b.n	8004136 <_printf_i+0x206>
 800415e:	2500      	movs	r5, #0
 8004160:	f104 0619 	add.w	r6, r4, #25
 8004164:	e7f5      	b.n	8004152 <_printf_i+0x222>
 8004166:	bf00      	nop
 8004168:	080046be 	.word	0x080046be
 800416c:	080046cf 	.word	0x080046cf

08004170 <__sflush_r>:
 8004170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004178:	0716      	lsls	r6, r2, #28
 800417a:	4605      	mov	r5, r0
 800417c:	460c      	mov	r4, r1
 800417e:	d454      	bmi.n	800422a <__sflush_r+0xba>
 8004180:	684b      	ldr	r3, [r1, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	dc02      	bgt.n	800418c <__sflush_r+0x1c>
 8004186:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	dd48      	ble.n	800421e <__sflush_r+0xae>
 800418c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800418e:	2e00      	cmp	r6, #0
 8004190:	d045      	beq.n	800421e <__sflush_r+0xae>
 8004192:	2300      	movs	r3, #0
 8004194:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004198:	682f      	ldr	r7, [r5, #0]
 800419a:	6a21      	ldr	r1, [r4, #32]
 800419c:	602b      	str	r3, [r5, #0]
 800419e:	d030      	beq.n	8004202 <__sflush_r+0x92>
 80041a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80041a2:	89a3      	ldrh	r3, [r4, #12]
 80041a4:	0759      	lsls	r1, r3, #29
 80041a6:	d505      	bpl.n	80041b4 <__sflush_r+0x44>
 80041a8:	6863      	ldr	r3, [r4, #4]
 80041aa:	1ad2      	subs	r2, r2, r3
 80041ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80041ae:	b10b      	cbz	r3, 80041b4 <__sflush_r+0x44>
 80041b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80041b2:	1ad2      	subs	r2, r2, r3
 80041b4:	2300      	movs	r3, #0
 80041b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80041b8:	6a21      	ldr	r1, [r4, #32]
 80041ba:	4628      	mov	r0, r5
 80041bc:	47b0      	blx	r6
 80041be:	1c43      	adds	r3, r0, #1
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	d106      	bne.n	80041d2 <__sflush_r+0x62>
 80041c4:	6829      	ldr	r1, [r5, #0]
 80041c6:	291d      	cmp	r1, #29
 80041c8:	d82b      	bhi.n	8004222 <__sflush_r+0xb2>
 80041ca:	4a2a      	ldr	r2, [pc, #168]	@ (8004274 <__sflush_r+0x104>)
 80041cc:	410a      	asrs	r2, r1
 80041ce:	07d6      	lsls	r6, r2, #31
 80041d0:	d427      	bmi.n	8004222 <__sflush_r+0xb2>
 80041d2:	2200      	movs	r2, #0
 80041d4:	6062      	str	r2, [r4, #4]
 80041d6:	04d9      	lsls	r1, r3, #19
 80041d8:	6922      	ldr	r2, [r4, #16]
 80041da:	6022      	str	r2, [r4, #0]
 80041dc:	d504      	bpl.n	80041e8 <__sflush_r+0x78>
 80041de:	1c42      	adds	r2, r0, #1
 80041e0:	d101      	bne.n	80041e6 <__sflush_r+0x76>
 80041e2:	682b      	ldr	r3, [r5, #0]
 80041e4:	b903      	cbnz	r3, 80041e8 <__sflush_r+0x78>
 80041e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80041e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80041ea:	602f      	str	r7, [r5, #0]
 80041ec:	b1b9      	cbz	r1, 800421e <__sflush_r+0xae>
 80041ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80041f2:	4299      	cmp	r1, r3
 80041f4:	d002      	beq.n	80041fc <__sflush_r+0x8c>
 80041f6:	4628      	mov	r0, r5
 80041f8:	f7ff fa92 	bl	8003720 <_free_r>
 80041fc:	2300      	movs	r3, #0
 80041fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8004200:	e00d      	b.n	800421e <__sflush_r+0xae>
 8004202:	2301      	movs	r3, #1
 8004204:	4628      	mov	r0, r5
 8004206:	47b0      	blx	r6
 8004208:	4602      	mov	r2, r0
 800420a:	1c50      	adds	r0, r2, #1
 800420c:	d1c9      	bne.n	80041a2 <__sflush_r+0x32>
 800420e:	682b      	ldr	r3, [r5, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0c6      	beq.n	80041a2 <__sflush_r+0x32>
 8004214:	2b1d      	cmp	r3, #29
 8004216:	d001      	beq.n	800421c <__sflush_r+0xac>
 8004218:	2b16      	cmp	r3, #22
 800421a:	d11e      	bne.n	800425a <__sflush_r+0xea>
 800421c:	602f      	str	r7, [r5, #0]
 800421e:	2000      	movs	r0, #0
 8004220:	e022      	b.n	8004268 <__sflush_r+0xf8>
 8004222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004226:	b21b      	sxth	r3, r3
 8004228:	e01b      	b.n	8004262 <__sflush_r+0xf2>
 800422a:	690f      	ldr	r7, [r1, #16]
 800422c:	2f00      	cmp	r7, #0
 800422e:	d0f6      	beq.n	800421e <__sflush_r+0xae>
 8004230:	0793      	lsls	r3, r2, #30
 8004232:	680e      	ldr	r6, [r1, #0]
 8004234:	bf08      	it	eq
 8004236:	694b      	ldreq	r3, [r1, #20]
 8004238:	600f      	str	r7, [r1, #0]
 800423a:	bf18      	it	ne
 800423c:	2300      	movne	r3, #0
 800423e:	eba6 0807 	sub.w	r8, r6, r7
 8004242:	608b      	str	r3, [r1, #8]
 8004244:	f1b8 0f00 	cmp.w	r8, #0
 8004248:	dde9      	ble.n	800421e <__sflush_r+0xae>
 800424a:	6a21      	ldr	r1, [r4, #32]
 800424c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800424e:	4643      	mov	r3, r8
 8004250:	463a      	mov	r2, r7
 8004252:	4628      	mov	r0, r5
 8004254:	47b0      	blx	r6
 8004256:	2800      	cmp	r0, #0
 8004258:	dc08      	bgt.n	800426c <__sflush_r+0xfc>
 800425a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800425e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004262:	81a3      	strh	r3, [r4, #12]
 8004264:	f04f 30ff 	mov.w	r0, #4294967295
 8004268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800426c:	4407      	add	r7, r0
 800426e:	eba8 0800 	sub.w	r8, r8, r0
 8004272:	e7e7      	b.n	8004244 <__sflush_r+0xd4>
 8004274:	dfbffffe 	.word	0xdfbffffe

08004278 <_fflush_r>:
 8004278:	b538      	push	{r3, r4, r5, lr}
 800427a:	690b      	ldr	r3, [r1, #16]
 800427c:	4605      	mov	r5, r0
 800427e:	460c      	mov	r4, r1
 8004280:	b913      	cbnz	r3, 8004288 <_fflush_r+0x10>
 8004282:	2500      	movs	r5, #0
 8004284:	4628      	mov	r0, r5
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	b118      	cbz	r0, 8004292 <_fflush_r+0x1a>
 800428a:	6a03      	ldr	r3, [r0, #32]
 800428c:	b90b      	cbnz	r3, 8004292 <_fflush_r+0x1a>
 800428e:	f7fe ffab 	bl	80031e8 <__sinit>
 8004292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f3      	beq.n	8004282 <_fflush_r+0xa>
 800429a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800429c:	07d0      	lsls	r0, r2, #31
 800429e:	d404      	bmi.n	80042aa <_fflush_r+0x32>
 80042a0:	0599      	lsls	r1, r3, #22
 80042a2:	d402      	bmi.n	80042aa <_fflush_r+0x32>
 80042a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042a6:	f7ff fa12 	bl	80036ce <__retarget_lock_acquire_recursive>
 80042aa:	4628      	mov	r0, r5
 80042ac:	4621      	mov	r1, r4
 80042ae:	f7ff ff5f 	bl	8004170 <__sflush_r>
 80042b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042b4:	07da      	lsls	r2, r3, #31
 80042b6:	4605      	mov	r5, r0
 80042b8:	d4e4      	bmi.n	8004284 <_fflush_r+0xc>
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	059b      	lsls	r3, r3, #22
 80042be:	d4e1      	bmi.n	8004284 <_fflush_r+0xc>
 80042c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042c2:	f7ff fa05 	bl	80036d0 <__retarget_lock_release_recursive>
 80042c6:	e7dd      	b.n	8004284 <_fflush_r+0xc>

080042c8 <fiprintf>:
 80042c8:	b40e      	push	{r1, r2, r3}
 80042ca:	b503      	push	{r0, r1, lr}
 80042cc:	4601      	mov	r1, r0
 80042ce:	ab03      	add	r3, sp, #12
 80042d0:	4805      	ldr	r0, [pc, #20]	@ (80042e8 <fiprintf+0x20>)
 80042d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80042d6:	6800      	ldr	r0, [r0, #0]
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	f7ff fca3 	bl	8003c24 <_vfiprintf_r>
 80042de:	b002      	add	sp, #8
 80042e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80042e4:	b003      	add	sp, #12
 80042e6:	4770      	bx	lr
 80042e8:	20000018 	.word	0x20000018

080042ec <__swhatbuf_r>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	460c      	mov	r4, r1
 80042f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f4:	2900      	cmp	r1, #0
 80042f6:	b096      	sub	sp, #88	@ 0x58
 80042f8:	4615      	mov	r5, r2
 80042fa:	461e      	mov	r6, r3
 80042fc:	da0d      	bge.n	800431a <__swhatbuf_r+0x2e>
 80042fe:	89a3      	ldrh	r3, [r4, #12]
 8004300:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004304:	f04f 0100 	mov.w	r1, #0
 8004308:	bf14      	ite	ne
 800430a:	2340      	movne	r3, #64	@ 0x40
 800430c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004310:	2000      	movs	r0, #0
 8004312:	6031      	str	r1, [r6, #0]
 8004314:	602b      	str	r3, [r5, #0]
 8004316:	b016      	add	sp, #88	@ 0x58
 8004318:	bd70      	pop	{r4, r5, r6, pc}
 800431a:	466a      	mov	r2, sp
 800431c:	f000 f862 	bl	80043e4 <_fstat_r>
 8004320:	2800      	cmp	r0, #0
 8004322:	dbec      	blt.n	80042fe <__swhatbuf_r+0x12>
 8004324:	9901      	ldr	r1, [sp, #4]
 8004326:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800432a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800432e:	4259      	negs	r1, r3
 8004330:	4159      	adcs	r1, r3
 8004332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004336:	e7eb      	b.n	8004310 <__swhatbuf_r+0x24>

08004338 <__smakebuf_r>:
 8004338:	898b      	ldrh	r3, [r1, #12]
 800433a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800433c:	079d      	lsls	r5, r3, #30
 800433e:	4606      	mov	r6, r0
 8004340:	460c      	mov	r4, r1
 8004342:	d507      	bpl.n	8004354 <__smakebuf_r+0x1c>
 8004344:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	6123      	str	r3, [r4, #16]
 800434c:	2301      	movs	r3, #1
 800434e:	6163      	str	r3, [r4, #20]
 8004350:	b003      	add	sp, #12
 8004352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004354:	ab01      	add	r3, sp, #4
 8004356:	466a      	mov	r2, sp
 8004358:	f7ff ffc8 	bl	80042ec <__swhatbuf_r>
 800435c:	9f00      	ldr	r7, [sp, #0]
 800435e:	4605      	mov	r5, r0
 8004360:	4639      	mov	r1, r7
 8004362:	4630      	mov	r0, r6
 8004364:	f7ff fa50 	bl	8003808 <_malloc_r>
 8004368:	b948      	cbnz	r0, 800437e <__smakebuf_r+0x46>
 800436a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800436e:	059a      	lsls	r2, r3, #22
 8004370:	d4ee      	bmi.n	8004350 <__smakebuf_r+0x18>
 8004372:	f023 0303 	bic.w	r3, r3, #3
 8004376:	f043 0302 	orr.w	r3, r3, #2
 800437a:	81a3      	strh	r3, [r4, #12]
 800437c:	e7e2      	b.n	8004344 <__smakebuf_r+0xc>
 800437e:	89a3      	ldrh	r3, [r4, #12]
 8004380:	6020      	str	r0, [r4, #0]
 8004382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004386:	81a3      	strh	r3, [r4, #12]
 8004388:	9b01      	ldr	r3, [sp, #4]
 800438a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800438e:	b15b      	cbz	r3, 80043a8 <__smakebuf_r+0x70>
 8004390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004394:	4630      	mov	r0, r6
 8004396:	f000 f837 	bl	8004408 <_isatty_r>
 800439a:	b128      	cbz	r0, 80043a8 <__smakebuf_r+0x70>
 800439c:	89a3      	ldrh	r3, [r4, #12]
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	81a3      	strh	r3, [r4, #12]
 80043a8:	89a3      	ldrh	r3, [r4, #12]
 80043aa:	431d      	orrs	r5, r3
 80043ac:	81a5      	strh	r5, [r4, #12]
 80043ae:	e7cf      	b.n	8004350 <__smakebuf_r+0x18>

080043b0 <memmove>:
 80043b0:	4288      	cmp	r0, r1
 80043b2:	b510      	push	{r4, lr}
 80043b4:	eb01 0402 	add.w	r4, r1, r2
 80043b8:	d902      	bls.n	80043c0 <memmove+0x10>
 80043ba:	4284      	cmp	r4, r0
 80043bc:	4623      	mov	r3, r4
 80043be:	d807      	bhi.n	80043d0 <memmove+0x20>
 80043c0:	1e43      	subs	r3, r0, #1
 80043c2:	42a1      	cmp	r1, r4
 80043c4:	d008      	beq.n	80043d8 <memmove+0x28>
 80043c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043ce:	e7f8      	b.n	80043c2 <memmove+0x12>
 80043d0:	4402      	add	r2, r0
 80043d2:	4601      	mov	r1, r0
 80043d4:	428a      	cmp	r2, r1
 80043d6:	d100      	bne.n	80043da <memmove+0x2a>
 80043d8:	bd10      	pop	{r4, pc}
 80043da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043e2:	e7f7      	b.n	80043d4 <memmove+0x24>

080043e4 <_fstat_r>:
 80043e4:	b538      	push	{r3, r4, r5, lr}
 80043e6:	4d07      	ldr	r5, [pc, #28]	@ (8004404 <_fstat_r+0x20>)
 80043e8:	2300      	movs	r3, #0
 80043ea:	4604      	mov	r4, r0
 80043ec:	4608      	mov	r0, r1
 80043ee:	4611      	mov	r1, r2
 80043f0:	602b      	str	r3, [r5, #0]
 80043f2:	f7fc fd31 	bl	8000e58 <_fstat>
 80043f6:	1c43      	adds	r3, r0, #1
 80043f8:	d102      	bne.n	8004400 <_fstat_r+0x1c>
 80043fa:	682b      	ldr	r3, [r5, #0]
 80043fc:	b103      	cbz	r3, 8004400 <_fstat_r+0x1c>
 80043fe:	6023      	str	r3, [r4, #0]
 8004400:	bd38      	pop	{r3, r4, r5, pc}
 8004402:	bf00      	nop
 8004404:	200002cc 	.word	0x200002cc

08004408 <_isatty_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4d06      	ldr	r5, [pc, #24]	@ (8004424 <_isatty_r+0x1c>)
 800440c:	2300      	movs	r3, #0
 800440e:	4604      	mov	r4, r0
 8004410:	4608      	mov	r0, r1
 8004412:	602b      	str	r3, [r5, #0]
 8004414:	f7fc fd30 	bl	8000e78 <_isatty>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	d102      	bne.n	8004422 <_isatty_r+0x1a>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	b103      	cbz	r3, 8004422 <_isatty_r+0x1a>
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	bd38      	pop	{r3, r4, r5, pc}
 8004424:	200002cc 	.word	0x200002cc

08004428 <_sbrk_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4d06      	ldr	r5, [pc, #24]	@ (8004444 <_sbrk_r+0x1c>)
 800442c:	2300      	movs	r3, #0
 800442e:	4604      	mov	r4, r0
 8004430:	4608      	mov	r0, r1
 8004432:	602b      	str	r3, [r5, #0]
 8004434:	f7fc fd38 	bl	8000ea8 <_sbrk>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d102      	bne.n	8004442 <_sbrk_r+0x1a>
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	b103      	cbz	r3, 8004442 <_sbrk_r+0x1a>
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	bd38      	pop	{r3, r4, r5, pc}
 8004444:	200002cc 	.word	0x200002cc

08004448 <memcpy>:
 8004448:	440a      	add	r2, r1
 800444a:	4291      	cmp	r1, r2
 800444c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004450:	d100      	bne.n	8004454 <memcpy+0xc>
 8004452:	4770      	bx	lr
 8004454:	b510      	push	{r4, lr}
 8004456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800445a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800445e:	4291      	cmp	r1, r2
 8004460:	d1f9      	bne.n	8004456 <memcpy+0xe>
 8004462:	bd10      	pop	{r4, pc}

08004464 <abort>:
 8004464:	b508      	push	{r3, lr}
 8004466:	2006      	movs	r0, #6
 8004468:	f000 f85a 	bl	8004520 <raise>
 800446c:	2001      	movs	r0, #1
 800446e:	f7fc fca3 	bl	8000db8 <_exit>

08004472 <_realloc_r>:
 8004472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004476:	4680      	mov	r8, r0
 8004478:	4615      	mov	r5, r2
 800447a:	460c      	mov	r4, r1
 800447c:	b921      	cbnz	r1, 8004488 <_realloc_r+0x16>
 800447e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004482:	4611      	mov	r1, r2
 8004484:	f7ff b9c0 	b.w	8003808 <_malloc_r>
 8004488:	b92a      	cbnz	r2, 8004496 <_realloc_r+0x24>
 800448a:	f7ff f949 	bl	8003720 <_free_r>
 800448e:	2400      	movs	r4, #0
 8004490:	4620      	mov	r0, r4
 8004492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004496:	f000 f85f 	bl	8004558 <_malloc_usable_size_r>
 800449a:	4285      	cmp	r5, r0
 800449c:	4606      	mov	r6, r0
 800449e:	d802      	bhi.n	80044a6 <_realloc_r+0x34>
 80044a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80044a4:	d8f4      	bhi.n	8004490 <_realloc_r+0x1e>
 80044a6:	4629      	mov	r1, r5
 80044a8:	4640      	mov	r0, r8
 80044aa:	f7ff f9ad 	bl	8003808 <_malloc_r>
 80044ae:	4607      	mov	r7, r0
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d0ec      	beq.n	800448e <_realloc_r+0x1c>
 80044b4:	42b5      	cmp	r5, r6
 80044b6:	462a      	mov	r2, r5
 80044b8:	4621      	mov	r1, r4
 80044ba:	bf28      	it	cs
 80044bc:	4632      	movcs	r2, r6
 80044be:	f7ff ffc3 	bl	8004448 <memcpy>
 80044c2:	4621      	mov	r1, r4
 80044c4:	4640      	mov	r0, r8
 80044c6:	f7ff f92b 	bl	8003720 <_free_r>
 80044ca:	463c      	mov	r4, r7
 80044cc:	e7e0      	b.n	8004490 <_realloc_r+0x1e>

080044ce <_raise_r>:
 80044ce:	291f      	cmp	r1, #31
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	4605      	mov	r5, r0
 80044d4:	460c      	mov	r4, r1
 80044d6:	d904      	bls.n	80044e2 <_raise_r+0x14>
 80044d8:	2316      	movs	r3, #22
 80044da:	6003      	str	r3, [r0, #0]
 80044dc:	f04f 30ff 	mov.w	r0, #4294967295
 80044e0:	bd38      	pop	{r3, r4, r5, pc}
 80044e2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80044e4:	b112      	cbz	r2, 80044ec <_raise_r+0x1e>
 80044e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80044ea:	b94b      	cbnz	r3, 8004500 <_raise_r+0x32>
 80044ec:	4628      	mov	r0, r5
 80044ee:	f000 f831 	bl	8004554 <_getpid_r>
 80044f2:	4622      	mov	r2, r4
 80044f4:	4601      	mov	r1, r0
 80044f6:	4628      	mov	r0, r5
 80044f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044fc:	f000 b818 	b.w	8004530 <_kill_r>
 8004500:	2b01      	cmp	r3, #1
 8004502:	d00a      	beq.n	800451a <_raise_r+0x4c>
 8004504:	1c59      	adds	r1, r3, #1
 8004506:	d103      	bne.n	8004510 <_raise_r+0x42>
 8004508:	2316      	movs	r3, #22
 800450a:	6003      	str	r3, [r0, #0]
 800450c:	2001      	movs	r0, #1
 800450e:	e7e7      	b.n	80044e0 <_raise_r+0x12>
 8004510:	2100      	movs	r1, #0
 8004512:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004516:	4620      	mov	r0, r4
 8004518:	4798      	blx	r3
 800451a:	2000      	movs	r0, #0
 800451c:	e7e0      	b.n	80044e0 <_raise_r+0x12>
	...

08004520 <raise>:
 8004520:	4b02      	ldr	r3, [pc, #8]	@ (800452c <raise+0xc>)
 8004522:	4601      	mov	r1, r0
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	f7ff bfd2 	b.w	80044ce <_raise_r>
 800452a:	bf00      	nop
 800452c:	20000018 	.word	0x20000018

08004530 <_kill_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	4d07      	ldr	r5, [pc, #28]	@ (8004550 <_kill_r+0x20>)
 8004534:	2300      	movs	r3, #0
 8004536:	4604      	mov	r4, r0
 8004538:	4608      	mov	r0, r1
 800453a:	4611      	mov	r1, r2
 800453c:	602b      	str	r3, [r5, #0]
 800453e:	f7fc fc2b 	bl	8000d98 <_kill>
 8004542:	1c43      	adds	r3, r0, #1
 8004544:	d102      	bne.n	800454c <_kill_r+0x1c>
 8004546:	682b      	ldr	r3, [r5, #0]
 8004548:	b103      	cbz	r3, 800454c <_kill_r+0x1c>
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	bd38      	pop	{r3, r4, r5, pc}
 800454e:	bf00      	nop
 8004550:	200002cc 	.word	0x200002cc

08004554 <_getpid_r>:
 8004554:	f7fc bc18 	b.w	8000d88 <_getpid>

08004558 <_malloc_usable_size_r>:
 8004558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800455c:	1f18      	subs	r0, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	bfbc      	itt	lt
 8004562:	580b      	ldrlt	r3, [r1, r0]
 8004564:	18c0      	addlt	r0, r0, r3
 8004566:	4770      	bx	lr

08004568 <_init>:
 8004568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456a:	bf00      	nop
 800456c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456e:	bc08      	pop	{r3}
 8004570:	469e      	mov	lr, r3
 8004572:	4770      	bx	lr

08004574 <_fini>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	bf00      	nop
 8004578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457a:	bc08      	pop	{r3}
 800457c:	469e      	mov	lr, r3
 800457e:	4770      	bx	lr
